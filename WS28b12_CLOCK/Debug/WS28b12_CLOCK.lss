
WS28b12_CLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b4  00800060  00001a54  00001ae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800214  00800214  00001c9c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c54  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f31  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd0  00000000  00000000  00005b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  000077e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099e  00000000  00000000  00007e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e7c  00000000  00000000  000087da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000a656  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	4d c4       	rjmp	.+2202   	; 0x89e <__vector_1>
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	5e c0       	rjmp	.+188    	; 0xc4 <__bad_interrupt>
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	5c c0       	rjmp	.+184    	; 0xc4 <__bad_interrupt>
       c:	b9 c1       	rjmp	.+882    	; 0x380 <__vector_6>
       e:	5a c0       	rjmp	.+180    	; 0xc4 <__bad_interrupt>
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	72 c0       	rjmp	.+228    	; 0xf8 <__vector_9>
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	56 c0       	rjmp	.+172    	; 0xc4 <__bad_interrupt>
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	54 c0       	rjmp	.+168    	; 0xc4 <__bad_interrupt>
      1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
      1e:	52 c0       	rjmp	.+164    	; 0xc4 <__bad_interrupt>
      20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
      22:	50 c0       	rjmp	.+160    	; 0xc4 <__bad_interrupt>
      24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
      26:	e2 c5       	rjmp	.+3012   	; 0xbec <ModifyRTC+0x20>
      28:	ef c5       	rjmp	.+3038   	; 0xc08 <ModifyRTC+0x3c>
      2a:	fc c5       	rjmp	.+3064   	; 0xc24 <ModifyRTC+0x58>
      2c:	4a c6       	rjmp	.+3220   	; 0xcc2 <ModifyRTC+0xf6>
      2e:	57 c6       	rjmp	.+3246   	; 0xcde <ModifyRTC+0x112>
      30:	64 c6       	rjmp	.+3272   	; 0xcfa <ModifyRTC+0x12e>
      32:	71 c6       	rjmp	.+3298   	; 0xd16 <ModifyRTC+0x14a>
      34:	7e c6       	rjmp	.+3324   	; 0xd32 <ModifyRTC+0x166>
      36:	01 c8       	rjmp	.-4094   	; 0xfffff03a <__eeprom_end+0xff7ef03a>
      38:	1e c7       	rjmp	.+3644   	; 0xe76 <send_color_to_1LED+0x20>
      3a:	31 c7       	rjmp	.+3682   	; 0xe9e <send_color_to_1LED+0x48>
      3c:	44 c7       	rjmp	.+3720   	; 0xec6 <send_color_to_1LED+0x70>
      3e:	57 c7       	rjmp	.+3758   	; 0xeee <send_color_to_1LED+0x98>
      40:	68 c7       	rjmp	.+3792   	; 0xf12 <send_color_to_1LED+0xbc>
      42:	7a c7       	rjmp	.+3828   	; 0xf38 <send_color_to_1LED+0xe2>
      44:	8c c7       	rjmp	.+3864   	; 0xf5e <send_color_to_1LED+0x108>
      46:	a8 c7       	rjmp	.+3920   	; 0xf98 <send_color_to_1LED+0x142>
      48:	fe c7       	rjmp	.+4092   	; 0x1046 <send_color_to_1LED+0x1f0>
      4a:	fd c7       	rjmp	.+4090   	; 0x1046 <send_color_to_1LED+0x1f0>
      4c:	c2 c7       	rjmp	.+3972   	; 0xfd2 <send_color_to_1LED+0x17c>
      4e:	cd c7       	rjmp	.+3994   	; 0xfea <send_color_to_1LED+0x194>
      50:	e7 c7       	rjmp	.+4046   	; 0x1020 <send_color_to_1LED+0x1ca>
      52:	2e c9       	rjmp	.-3492   	; 0xfffff2b0 <__eeprom_end+0xff7ef2b0>
      54:	30 c9       	rjmp	.-3488   	; 0xfffff2b6 <__eeprom_end+0xff7ef2b6>
      56:	13 c9       	rjmp	.-3546   	; 0xfffff27e <__eeprom_end+0xff7ef27e>
      58:	15 c9       	rjmp	.-3542   	; 0xfffff284 <__eeprom_end+0xff7ef284>
      5a:	17 c9       	rjmp	.-3538   	; 0xfffff28a <__eeprom_end+0xff7ef28a>
      5c:	19 c9       	rjmp	.-3534   	; 0xfffff290 <__eeprom_end+0xff7ef290>
      5e:	1b c9       	rjmp	.-3530   	; 0xfffff296 <__eeprom_end+0xff7ef296>
      60:	1d c9       	rjmp	.-3526   	; 0xfffff29c <__eeprom_end+0xff7ef29c>
      62:	1f c9       	rjmp	.-3522   	; 0xfffff2a2 <__eeprom_end+0xff7ef2a2>
      64:	21 c9       	rjmp	.-3518   	; 0xfffff2a8 <__eeprom_end+0xff7ef2a8>
      66:	4c c9       	rjmp	.-3432   	; 0xfffff300 <__eeprom_end+0xff7ef300>
      68:	4e c9       	rjmp	.-3428   	; 0xfffff306 <__eeprom_end+0xff7ef306>
      6a:	31 c9       	rjmp	.-3486   	; 0xfffff2ce <__eeprom_end+0xff7ef2ce>
      6c:	33 c9       	rjmp	.-3482   	; 0xfffff2d4 <__eeprom_end+0xff7ef2d4>
      6e:	35 c9       	rjmp	.-3478   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      70:	37 c9       	rjmp	.-3474   	; 0xfffff2e0 <__eeprom_end+0xff7ef2e0>
      72:	39 c9       	rjmp	.-3470   	; 0xfffff2e6 <__eeprom_end+0xff7ef2e6>
      74:	3b c9       	rjmp	.-3466   	; 0xfffff2ec <__eeprom_end+0xff7ef2ec>
      76:	3d c9       	rjmp	.-3462   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
      78:	3f c9       	rjmp	.-3458   	; 0xfffff2f8 <__eeprom_end+0xff7ef2f8>
      7a:	64 c9       	rjmp	.-3384   	; 0xfffff344 <__eeprom_end+0xff7ef344>
      7c:	66 c9       	rjmp	.-3380   	; 0xfffff34a <__eeprom_end+0xff7ef34a>
      7e:	4f c9       	rjmp	.-3426   	; 0xfffff31e <__eeprom_end+0xff7ef31e>
      80:	51 c9       	rjmp	.-3422   	; 0xfffff324 <__eeprom_end+0xff7ef324>
      82:	53 c9       	rjmp	.-3418   	; 0xfffff32a <__eeprom_end+0xff7ef32a>
      84:	55 c9       	rjmp	.-3414   	; 0xfffff330 <__eeprom_end+0xff7ef330>
      86:	5e c9       	rjmp	.-3396   	; 0xfffff344 <__eeprom_end+0xff7ef344>
      88:	56 c9       	rjmp	.-3412   	; 0xfffff336 <__eeprom_end+0xff7ef336>
      8a:	58 c9       	rjmp	.-3408   	; 0xfffff33c <__eeprom_end+0xff7ef33c>
      8c:	5b c9       	rjmp	.-3402   	; 0xfffff344 <__eeprom_end+0xff7ef344>

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf e5       	ldi	r28, 0x5F	; 95
      94:	d4 e0       	ldi	r29, 0x04	; 4
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	12 e0       	ldi	r17, 0x02	; 2
      9c:	a0 e6       	ldi	r26, 0x60	; 96
      9e:	b0 e0       	ldi	r27, 0x00	; 0
      a0:	e4 e5       	ldi	r30, 0x54	; 84
      a2:	fa e1       	ldi	r31, 0x1A	; 26
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a4 31       	cpi	r26, 0x14	; 20
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	22 e0       	ldi	r18, 0x02	; 2
      b2:	a4 e1       	ldi	r26, 0x14	; 20
      b4:	b2 e0       	ldi	r27, 0x02	; 2
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	ae 34       	cpi	r26, 0x4E	; 78
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	38 d4       	rcall	.+2160   	; 0x932 <main>
      c2:	c6 cc       	rjmp	.-1652   	; 0xfffffa50 <__eeprom_end+0xff7efa50>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <ADC_Init>:
 */ 
#include "adc.h"
//—————————————-
void ADC_Init(void)
{
	ADCSRA |= (1<<ADEN);//вкл АЦП
      c6:	86 b1       	in	r24, 0x06	; 6
      c8:	80 68       	ori	r24, 0x80	; 128
      ca:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//устанвоили 64кГЦ
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	87 60       	ori	r24, 0x07	; 7
      d0:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1<<REFS1)|(1<<REFS0);//внутр ист опорн напряж
      d2:	87 b1       	in	r24, 0x07	; 7
      d4:	80 6c       	ori	r24, 0xC0	; 192
      d6:	87 b9       	out	0x07, r24	; 7
      d8:	08 95       	ret

000000da <ADC_convert>:
}
unsigned int ADC_convert (void)
{
	ADCSRA |= (1<<ADSC);//начало измерений
      da:	86 b1       	in	r24, 0x06	; 6
      dc:	80 64       	ori	r24, 0x40	; 64
      de:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADSC)));
      e0:	36 99       	sbic	0x06, 6	; 6
      e2:	fe cf       	rjmp	.-4      	; 0xe0 <ADC_convert+0x6>
	return (unsigned int) ADC;
      e4:	84 b1       	in	r24, 0x04	; 4
      e6:	95 b1       	in	r25, 0x05	; 5
}
      e8:	08 95       	ret

000000ea <init_button_timer>:
extern int Flag;
unsigned char buttonstat = 0,cnt=0;
//———————————————
void init_button_timer(void)//инициализация нулевого таймера
{
	TIMSK |= (1<<TOIE0); //устанавливаем бит разрешения прерывания 0-ого счетчика
      ea:	89 b7       	in	r24, 0x39	; 57
      ec:	81 60       	ori	r24, 0x01	; 1
      ee:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<CS02)|(1<<CS00); // устанавливаем предделитель 1024
      f0:	83 b7       	in	r24, 0x33	; 51
      f2:	85 60       	ori	r24, 0x05	; 5
      f4:	83 bf       	out	0x33, r24	; 51
      f6:	08 95       	ret

000000f8 <__vector_9>:
}
//———————————————
ISR (TIMER0_OVF_vect)
{
      f8:	1f 92       	push	r1
      fa:	0f 92       	push	r0
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	0f 92       	push	r0
     100:	11 24       	eor	r1, r1
     102:	2f 93       	push	r18
     104:	3f 93       	push	r19
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
	  if (buttonstat == 1) cnt++;
     10a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <buttonstat>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	29 f4       	brne	.+10     	; 0x11c <__vector_9+0x24>
     112:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     116:	8f 5f       	subi	r24, 0xFF	; 255
     118:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
	  if (cnt > 30)
     11c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     120:	8f 31       	cpi	r24, 0x1F	; 31
     122:	20 f0       	brcs	.+8      	; 0x12c <__vector_9+0x34>
	  {
		  buttonstat = 0;
     124:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <buttonstat>
		  cnt = 0;
     128:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
	  }
	  if ((!(PIND&0b01000000)) && (buttonstat == 0))//если кнопка нажата и это не продолжение нажатия
     12c:	86 99       	sbic	0x10, 6	; 16
     12e:	0e c0       	rjmp	.+28     	; 0x14c <__vector_9+0x54>
     130:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <buttonstat>
     134:	81 11       	cpse	r24, r1
     136:	0a c0       	rjmp	.+20     	; 0x14c <__vector_9+0x54>
	  {
		 button_counter++; 
     138:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <button_counter>
     13c:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <button_counter+0x1>
     140:	01 96       	adiw	r24, 0x01	; 1
     142:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <button_counter+0x1>
     146:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <button_counter>
     14a:	3b c0       	rjmp	.+118    	; 0x1c2 <__vector_9+0xca>
	  }
	  else if ((button_counter > 5)&&(button_counter <= 40)) //если будет до 3 — то считаем это дребезгом
     14c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <button_counter>
     150:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <button_counter+0x1>
     154:	9c 01       	movw	r18, r24
     156:	26 50       	subi	r18, 0x06	; 6
     158:	31 09       	sbc	r19, r1
     15a:	23 32       	cpi	r18, 0x23	; 35
     15c:	31 05       	cpc	r19, r1
     15e:	70 f4       	brcc	.+28     	; 0x17c <__vector_9+0x84>
	  {
		  clock_incr_mode = MODE_INC;//включаем прибавление значения показателя
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <clock_incr_mode>
		  if (clock_change_mode == MODE_WITHOUT_CHANGE)   alarm_now_mode = 0;//отключение будильника
     166:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <clock_change_mode>
     16a:	81 11       	cpse	r24, r1
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__vector_9+0x7a>
     16e:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <alarm_now_mode>
	      button_counter = 0;
     172:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <button_counter+0x1>
     176:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <button_counter>
     17a:	23 c0       	rjmp	.+70     	; 0x1c2 <__vector_9+0xca>
	  }
	  else if (button_counter > 40) 
     17c:	89 97       	sbiw	r24, 0x29	; 41
     17e:	08 f1       	brcs	.+66     	; 0x1c2 <__vector_9+0xca>
	  {
		  if (clock_change_mode < MODE_CHANGE_ALARM_MINUTES) 
     180:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <clock_change_mode>
     184:	88 30       	cpi	r24, 0x08	; 8
     186:	68 f4       	brcc	.+26     	; 0x1a2 <__vector_9+0xaa>
		  {
			clock_change_mode++; 
     188:	8f 5f       	subi	r24, 0xFF	; 255
     18a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <clock_change_mode>
			Flag++; 
     18e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Flag>
     192:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <Flag+0x1>
     196:	01 96       	adiw	r24, 0x01	; 1
     198:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <Flag+0x1>
     19c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <Flag>
     1a0:	06 c0       	rjmp	.+12     	; 0x1ae <__vector_9+0xb6>
		  }
		  else {clock_change_mode = MODE_WITHOUT_CHANGE;Flag = 0;}
     1a2:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <clock_change_mode>
     1a6:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <Flag+0x1>
     1aa:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <Flag>
		  clock_incr_mode=MODE_NO_INC;
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <clock_incr_mode>
		  button_counter = 0;
     1b4:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <button_counter+0x1>
     1b8:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <button_counter>
		  buttonstat = 1;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <buttonstat>
	  }
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	3f 91       	pop	r19
     1c8:	2f 91       	pop	r18
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <dt_testdevice>:
  return tt;
}
//функция определения датчика на шине
char dt_testdevice(void) //dt — digital termomether | определим, есть ли устройство на шине
{
  char stektemp=SREG;// сохраним значение стека
     1d4:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывания
     1d6:	f8 94       	cli
  char dt;
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
     1d8:	81 b3       	in	r24, 0x11	; 17
     1da:	80 68       	ori	r24, 0x80	; 128
     1dc:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1de:	e3 e9       	ldi	r30, 0x93	; 147
     1e0:	f7 e0       	ldi	r31, 0x07	; 7
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <dt_testdevice+0xe>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <dt_testdevice+0x14>
     1e8:	00 00       	nop
  _delay_us(485); //задержка как минимум на 480 микросекунд
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     1ea:	81 b3       	in	r24, 0x11	; 17
     1ec:	8f 77       	andi	r24, 0x7F	; 127
     1ee:	81 bb       	out	0x11, r24	; 17
     1f0:	e3 e0       	ldi	r30, 0x03	; 3
     1f2:	f1 e0       	ldi	r31, 0x01	; 1
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <dt_testdevice+0x20>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <dt_testdevice+0x26>
     1fa:	00 00       	nop
  _delay_us(65); //задержка как минимум на 60 микросекунд
  if ((PINTEMP & (1<<BITTEMP))==0)//проверяем, ответит ли устройство
     1fc:	87 99       	sbic	0x10, 7	; 16
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
  {
	  dt=1;//устройство есть
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	01 c0       	rjmp	.+2      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
  }
  else dt=0;//устройства нет
     204:	80 e0       	ldi	r24, 0x00	; 0
  SREG = stektemp;// вернем значение стека
     206:	9f bf       	out	0x3f, r25	; 63
     208:	ef e8       	ldi	r30, 0x8F	; 143
     20a:	f6 e0       	ldi	r31, 0x06	; 6
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
     210:	00 c0       	rjmp	.+0      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
     212:	00 00       	nop
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
     214:	08 95       	ret

00000216 <dt_readbit>:
	return c;
}
//функция чтения бита с устройства
char dt_readbit(void)
{
  char stektemp=SREG;// сохраним значение стека
     216:	9f b7       	in	r25, 0x3f	; 63
  cli(); //запрещаем прерывание
     218:	f8 94       	cli
  char bt; //переменная хранения бита
  DDRTEMP |= 1<<BITTEMP; //притягиваем шину
     21a:	81 b3       	in	r24, 0x11	; 17
     21c:	80 68       	ori	r24, 0x80	; 128
     21e:	81 bb       	out	0x11, r24	; 17
     220:	2a e0       	ldi	r18, 0x0A	; 10
     222:	2a 95       	dec	r18
     224:	f1 f7       	brne	.-4      	; 0x222 <dt_readbit+0xc>
     226:	00 c0       	rjmp	.+0      	; 0x228 <dt_readbit+0x12>
  _delay_us(2); //задержка как минимум на 2 микросекунды
  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     228:	81 b3       	in	r24, 0x11	; 17
     22a:	8f 77       	andi	r24, 0x7F	; 127
     22c:	81 bb       	out	0x11, r24	; 17
     22e:	85 e4       	ldi	r24, 0x45	; 69
     230:	8a 95       	dec	r24
     232:	f1 f7       	brne	.-4      	; 0x230 <dt_readbit+0x1a>
     234:	00 00       	nop
  _delay_us(13);
  bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
     236:	80 b3       	in	r24, 0x10	; 16
     238:	88 1f       	adc	r24, r24
     23a:	88 27       	eor	r24, r24
     23c:	88 1f       	adc	r24, r24
     23e:	20 ef       	ldi	r18, 0xF0	; 240
     240:	2a 95       	dec	r18
     242:	f1 f7       	brne	.-4      	; 0x240 <dt_readbit+0x2a>
  _delay_us(45);
  SREG = stektemp;// вернем значение стека
     244:	9f bf       	out	0x3f, r25	; 63
  return bt; //вернем результат
}
     246:	08 95       	ret

00000248 <dt_readbyte>:
  _delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
  return dt; //вернем результат
}
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
     24c:	c0 e0       	ldi	r28, 0x00	; 0
  return dt; //вернем результат
}
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
     24e:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
     250:	0a c0       	rjmp	.+20     	; 0x266 <dt_readbyte+0x1e>
	{
	  c|=dt_readbit()<<i; //читаем бит
     252:	e1 df       	rcall	.-62     	; 0x216 <dt_readbit>
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0c 2e       	mov	r0, r28
     258:	02 c0       	rjmp	.+4      	; 0x25e <dt_readbyte+0x16>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <dt_readbyte+0x12>
     262:	d8 2b       	or	r29, r24
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
     264:	cf 5f       	subi	r28, 0xFF	; 255
     266:	c8 30       	cpi	r28, 0x08	; 8
     268:	a0 f3       	brcs	.-24     	; 0x252 <dt_readbyte+0xa>
	{
	  c|=dt_readbit()<<i; //читаем бит
	}
	return c;
}
     26a:	8d 2f       	mov	r24, r29
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <dt_sendbit>:
	}
}
//функция записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
     272:	2f b7       	in	r18, 0x3f	; 63
	cli(); //запрещаем прерывание
     274:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //притягиваем шину
     276:	91 b3       	in	r25, 0x11	; 17
     278:	90 68       	ori	r25, 0x80	; 128
     27a:	91 bb       	out	0x11, r25	; 17
     27c:	9a e0       	ldi	r25, 0x0A	; 10
     27e:	9a 95       	dec	r25
     280:	f1 f7       	brne	.-4      	; 0x27e <dt_sendbit+0xc>
     282:	00 c0       	rjmp	.+0      	; 0x284 <dt_sendbit+0x12>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
     284:	88 23       	and	r24, r24
     286:	19 f0       	breq	.+6      	; 0x28e <dt_sendbit+0x1c>
    {
	  DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     288:	81 b3       	in	r24, 0x11	; 17
     28a:	8f 77       	andi	r24, 0x7F	; 127
     28c:	81 bb       	out	0x11, r24	; 17
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <dt_sendbit+0x20>
     296:	00 c0       	rjmp	.+0      	; 0x298 <dt_sendbit+0x26>
     298:	00 00       	nop
	}
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
     29a:	81 b3       	in	r24, 0x11	; 17
     29c:	8f 77       	andi	r24, 0x7F	; 127
     29e:	81 bb       	out	0x11, r24	; 17
	SREG = stektemp;// вернем значение стека
     2a0:	2f bf       	out	0x3f, r18	; 63
     2a2:	08 95       	ret

000002a4 <dt_sendbyte>:
  SREG = stektemp;// вернем значение стека
  return bt; //вернем результат
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	d8 2f       	mov	r29, r24
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     2aa:	c0 e0       	ldi	r28, 0x00	; 0
     2ac:	15 c0       	rjmp	.+42     	; 0x2d8 <dt_sendbyte+0x34>
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0c 2e       	mov	r0, r28
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <dt_sendbyte+0x16>
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	0a 94       	dec	r0
     2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <dt_sendbyte+0x12>
     2be:	2d 2f       	mov	r18, r29
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	28 23       	and	r18, r24
     2c4:	39 23       	and	r19, r25
     2c6:	82 17       	cp	r24, r18
     2c8:	93 07       	cpc	r25, r19
     2ca:	19 f4       	brne	.+6      	; 0x2d2 <dt_sendbyte+0x2e>
		dt_sendbit(1);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	d1 df       	rcall	.-94     	; 0x272 <dt_sendbit>
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <dt_sendbyte+0x32>
		else //посылаем 0
		dt_sendbit(0);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	ce df       	rcall	.-100    	; 0x272 <dt_sendbit>
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
     2d6:	cf 5f       	subi	r28, 0xFF	; 255
     2d8:	c8 30       	cpi	r28, 0x08	; 8
     2da:	48 f3       	brcs	.-46     	; 0x2ae <dt_sendbyte+0xa>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <dt_check>:

#include "DS18B20.h"

//функция преобразования показаний датчика в температуру
int dt_check(void)
{
     2e2:	cf 93       	push	r28
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
  if(dt_testdevice()==1) //если устройство нашлось
     2e4:	77 df       	rcall	.-274    	; 0x1d4 <dt_testdevice>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	d1 f4       	brne	.+52     	; 0x31e <dt_check+0x3c>
  {
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     2ea:	8c ec       	ldi	r24, 0xCC	; 204
     2ec:	db df       	rcall	.-74     	; 0x2a4 <dt_sendbyte>
   dt_sendbyte(T_CONVERT); //измеряем температуру
     2ee:	84 e4       	ldi	r24, 0x44	; 68
     2f0:	d9 df       	rcall	.-78     	; 0x2a4 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	2f ef       	ldi	r18, 0xFF	; 255
     2f4:	81 ee       	ldi	r24, 0xE1	; 225
     2f6:	94 e0       	ldi	r25, 0x04	; 4
     2f8:	21 50       	subi	r18, 0x01	; 1
     2fa:	80 40       	sbci	r24, 0x00	; 0
     2fc:	90 40       	sbci	r25, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <dt_check+0x16>
     300:	00 c0       	rjmp	.+0      	; 0x302 <dt_check+0x20>
     302:	00 00       	nop
   _delay_ms(100); //в 9битном режиме преобразования — 100 милисекунд
   dt_testdevice(); //снова используем те же манипуляции с шиной что и при проверке ее присутствия
     304:	67 df       	rcall	.-306    	; 0x1d4 <dt_testdevice>
   dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
     306:	8c ec       	ldi	r24, 0xCC	; 204
     308:	cd df       	rcall	.-102    	; 0x2a4 <dt_sendbyte>
   dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
     30a:	8e eb       	ldi	r24, 0xBE	; 190
     30c:	cb df       	rcall	.-106    	; 0x2a4 <dt_sendbyte>
   bt = dt_readbyte(); //читаем младший бит
     30e:	9c df       	rcall	.-200    	; 0x248 <dt_readbyte>
     310:	c8 2f       	mov	r28, r24
   tt = dt_readbyte(); //читаем старший бит MS
     312:	9a df       	rcall	.-204    	; 0x248 <dt_readbyte>
     314:	90 e0       	ldi	r25, 0x00	; 0
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
     316:	98 2f       	mov	r25, r24
     318:	88 27       	eor	r24, r24
     31a:	8c 2b       	or	r24, r28
     31c:	02 c0       	rjmp	.+4      	; 0x322 <dt_check+0x40>

//функция преобразования показаний датчика в температуру
int dt_check(void)
{
  unsigned char bt;//переменная для считывания байта
  unsigned int tt=0;
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
   bt = dt_readbyte(); //читаем младший бит
   tt = dt_readbyte(); //читаем старший бит MS
   tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
  }
  return tt;
}
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <converttemp>:
	SREG = stektemp;// вернем значение стека
}
//преобразование температуры в единицы
char converttemp (unsigned int tt)
{
	char t = tt>>3;//сдвиг и отсечение части старшего байта
     326:	96 95       	lsr	r25
     328:	87 95       	ror	r24
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
	return t;
     332:	08 95       	ret

00000334 <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)//1 байт
{
	while(EECR & (1<<EEWE)) //ждем освобождения флага окончания последней операцией с памятью
     334:	e1 99       	sbic	0x1c, 1	; 28
     336:	fe cf       	rjmp	.-4      	; 0x334 <EEPROM_write>
	{}
	EEAR = uiAddress; //Устанавливаем адрес
     338:	9f bb       	out	0x1f, r25	; 31
     33a:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //Пищем данные в регистр
     33c:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //Разрешаем запись
     33e:	8c b3       	in	r24, 0x1c	; 28
     340:	84 60       	ori	r24, 0x04	; 4
     342:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE); //Пишем байт в память
     344:	8c b3       	in	r24, 0x1c	; 28
     346:	82 60       	ori	r24, 0x02	; 2
     348:	8c bb       	out	0x1c, r24	; 28
     34a:	08 95       	ret

0000034c <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)//1 байт
{
	while(EECR & (1<<EEWE))
     34c:	e1 99       	sbic	0x1c, 1	; 28
     34e:	fe cf       	rjmp	.-4      	; 0x34c <EEPROM_read>
	{} //ждем освобождения флага окончания последней операцией с памятью
	EEAR = uiAddress; //Устанавливаем адрес
     350:	9f bb       	out	0x1f, r25	; 31
     352:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //Запускаем операцию считывания из памяти в регистр данных
     354:	8c b3       	in	r24, 0x1c	; 28
     356:	81 60       	ori	r24, 0x01	; 1
     358:	8c bb       	out	0x1c, r24	; 28
	return EEDR; //Возвращаем результат
     35a:	8d b3       	in	r24, 0x1d	; 29
}
     35c:	08 95       	ret

0000035e <timer_ini>:
int Flag = 0;
//---------------------------------------------
//инициализация таймера для моргания в режиме редактирования часов
void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
     35e:	8e b5       	in	r24, 0x2e	; 46
     360:	88 60       	ori	r24, 0x08	; 8
     362:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
     364:	89 b7       	in	r24, 0x39	; 57
     366:	80 61       	ori	r24, 0x10	; 16
     368:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b01111010; //записываем в регистр число для сравнения
     36a:	8a e7       	ldi	r24, 0x7A	; 122
     36c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00010010;
     36e:	82 e1       	ldi	r24, 0x12	; 18
     370:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
     372:	8e b5       	in	r24, 0x2e	; 46
     374:	82 60       	ori	r24, 0x02	; 2
     376:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS10);//частота получается 8 Гц
     378:	8e b5       	in	r24, 0x2e	; 46
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	8e bd       	out	0x2e, r24	; 46
     37e:	08 95       	ret

00000380 <__vector_6>:
}
//---------------------------------------------
// прерывания таймера
ISR (TIMER1_COMPA_vect)
{
     380:	1f 92       	push	r1
     382:	0f 92       	push	r0
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	0f 92       	push	r0
     388:	11 24       	eor	r1, r1
     38a:	2f 93       	push	r18
     38c:	3f 93       	push	r19
     38e:	4f 93       	push	r20
     390:	5f 93       	push	r21
     392:	6f 93       	push	r22
     394:	7f 93       	push	r23
     396:	8f 93       	push	r24
     398:	9f 93       	push	r25
     39a:	af 93       	push	r26
     39c:	bf 93       	push	r27
     39e:	ef 93       	push	r30
     3a0:	ff 93       	push	r31
	timer1_count++;
     3a2:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <timer1_count>
     3a6:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <timer1_count+0x1>
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <timer1_count+0x1>
     3b0:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <timer1_count>
	if (timer1_count > 1)
     3b4:	02 97       	sbiw	r24, 0x02	; 2
     3b6:	24 f0       	brlt	.+8      	; 0x3c0 <__vector_6+0x40>
	{
		timer1_count = 0;
     3b8:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <timer1_count+0x1>
     3bc:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <timer1_count>
	}
	//------------------------------------------------------
	// для режима индикации mode11
		 if (counter_of_leds > 255)
     3c0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <counter_of_leds>
     3c4:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <counter_of_leds+0x1>
     3c8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ca:	91 05       	cpc	r25, r1
     3cc:	39 f0       	breq	.+14     	; 0x3dc <__vector_6+0x5c>
     3ce:	34 f0       	brlt	.+12     	; 0x3dc <__vector_6+0x5c>
		 {
			 flag_mode11 = 1;
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <flag_mode11+0x1>
     3d8:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <flag_mode11>
		 }
		 if (counter_of_leds < 1)
     3dc:	18 16       	cp	r1, r24
     3de:	19 06       	cpc	r1, r25
     3e0:	24 f0       	brlt	.+8      	; 0x3ea <__vector_6+0x6a>
		 {
			 flag_mode11 = 0;
     3e2:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <flag_mode11+0x1>
     3e6:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <flag_mode11>
		 }
		 if (flag_mode11 == 0) counter_of_leds += 5;
     3ea:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <flag_mode11>
     3ee:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <flag_mode11+0x1>
     3f2:	23 2b       	or	r18, r19
     3f4:	31 f4       	brne	.+12     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <counter_of_leds+0x1>
     3fc:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <counter_of_leds>
     400:	05 c0       	rjmp	.+10     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
		 else counter_of_leds -= 5;
     402:	05 97       	sbiw	r24, 0x05	; 5
     404:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <counter_of_leds+0x1>
     408:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <counter_of_leds>
	//------------------------------------------------------
	// для режима индикации mode12
	if (green_mode12 > 50)
     40c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <green_mode12>
     410:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <green_mode12+0x1>
     414:	83 33       	cpi	r24, 0x33	; 51
     416:	91 05       	cpc	r25, r1
     418:	34 f0       	brlt	.+12     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
	{
		flag_mode12 = 1;
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <flag_mode12+0x1>
     422:	20 93 2a 02 	sts	0x022A, r18	; 0x80022a <flag_mode12>
	}
	if (green_mode12 < 5)
     426:	85 30       	cpi	r24, 0x05	; 5
     428:	91 05       	cpc	r25, r1
     42a:	24 f4       	brge	.+8      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
	{
		flag_mode12 = 0;
     42c:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <flag_mode12+0x1>
     430:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <flag_mode12>
	}
	if (flag_mode12 == 0)
     434:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <flag_mode12>
     438:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <flag_mode12+0x1>
     43c:	23 2b       	or	r18, r19
     43e:	81 f4       	brne	.+32     	; 0x460 <__stack+0x1>
	{
		red_mode12 = red_mode12 - 2;
     440:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <red_mode12>
     444:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <red_mode12+0x1>
     448:	22 50       	subi	r18, 0x02	; 2
     44a:	31 09       	sbc	r19, r1
     44c:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <red_mode12+0x1>
     450:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <red_mode12>
		green_mode12 = green_mode12 + 3;
     454:	03 96       	adiw	r24, 0x03	; 3
     456:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <green_mode12+0x1>
     45a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <green_mode12>
     45e:	0f c0       	rjmp	.+30     	; 0x47e <__stack+0x1f>
	}
	else
	{
		red_mode12 = red_mode12 + 2;
     460:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <red_mode12>
     464:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <red_mode12+0x1>
     468:	2e 5f       	subi	r18, 0xFE	; 254
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <red_mode12+0x1>
     470:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <red_mode12>
		green_mode12 = green_mode12 - 3;
     474:	03 97       	sbiw	r24, 0x03	; 3
     476:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <green_mode12+0x1>
     47a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <green_mode12>
	}
	//------------------------------------------------------
	// для режима индикации mode13 - радуга
	   if ( (flag1 == 0) &&(flag2 == 0) &&(flag3 == 0) &&(flag4 == 0) && (flag5 == 0)&& (green_mode13 < 255) && (red_mode13 == 255) && (blue_mode13 == 0) ) {green_mode13 = green_mode13 + 5;} //красный->оранжевый->желтый
     47e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <flag1>
     482:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <flag1+0x1>
     486:	89 2b       	or	r24, r25
     488:	91 f5       	brne	.+100    	; 0x4ee <__stack+0x8f>
     48a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <flag2>
     48e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <flag2+0x1>
     492:	89 2b       	or	r24, r25
     494:	61 f5       	brne	.+88     	; 0x4ee <__stack+0x8f>
     496:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <flag3>
     49a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <flag3+0x1>
     49e:	89 2b       	or	r24, r25
     4a0:	31 f5       	brne	.+76     	; 0x4ee <__stack+0x8f>
     4a2:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <flag4>
     4a6:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <flag4+0x1>
     4aa:	89 2b       	or	r24, r25
     4ac:	01 f5       	brne	.+64     	; 0x4ee <__stack+0x8f>
     4ae:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <flag5>
     4b2:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <flag5+0x1>
     4b6:	89 2b       	or	r24, r25
     4b8:	d1 f4       	brne	.+52     	; 0x4ee <__stack+0x8f>
     4ba:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <green_mode13>
     4be:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <green_mode13+0x1>
     4c2:	8f 3f       	cpi	r24, 0xFF	; 255
     4c4:	91 05       	cpc	r25, r1
     4c6:	9c f4       	brge	.+38     	; 0x4ee <__stack+0x8f>
     4c8:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <red_mode13>
     4cc:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <red_mode13+0x1>
     4d0:	2f 3f       	cpi	r18, 0xFF	; 255
     4d2:	31 05       	cpc	r19, r1
     4d4:	61 f4       	brne	.+24     	; 0x4ee <__stack+0x8f>
     4d6:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <blue_mode13>
     4da:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <blue_mode13+0x1>
     4de:	23 2b       	or	r18, r19
     4e0:	31 f4       	brne	.+12     	; 0x4ee <__stack+0x8f>
     4e2:	05 96       	adiw	r24, 0x05	; 5
     4e4:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <green_mode13+0x1>
     4e8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <green_mode13>
     4ec:	2e c1       	rjmp	.+604    	; 0x74a <__stack+0x2eb>
	   else {flag1 = 1;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <flag1+0x1>
     4f6:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <flag1>
	   if ( (flag1 == 1) && (flag2 == 0)&&(flag3 == 0) &&(flag4 == 0) && (flag5 == 0) && (green_mode13 > 204) && (red_mode13 > 0) && (blue_mode13 == 0) ) {green_mode13 = green_mode13 - 3; red_mode13 = red_mode13 - 15;}//...->зеленый
     4fa:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <flag2>
     4fe:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <flag2+0x1>
     502:	89 2b       	or	r24, r25
     504:	91 f5       	brne	.+100    	; 0x56a <__stack+0x10b>
     506:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <flag3>
     50a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <flag3+0x1>
     50e:	89 2b       	or	r24, r25
     510:	61 f5       	brne	.+88     	; 0x56a <__stack+0x10b>
     512:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <flag4>
     516:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <flag4+0x1>
     51a:	89 2b       	or	r24, r25
     51c:	31 f5       	brne	.+76     	; 0x56a <__stack+0x10b>
     51e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <flag5>
     522:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <flag5+0x1>
     526:	89 2b       	or	r24, r25
     528:	01 f5       	brne	.+64     	; 0x56a <__stack+0x10b>
     52a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <green_mode13>
     52e:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <green_mode13+0x1>
     532:	8d 3c       	cpi	r24, 0xCD	; 205
     534:	91 05       	cpc	r25, r1
     536:	cc f0       	brlt	.+50     	; 0x56a <__stack+0x10b>
     538:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <red_mode13>
     53c:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <red_mode13+0x1>
     540:	12 16       	cp	r1, r18
     542:	13 06       	cpc	r1, r19
     544:	94 f4       	brge	.+36     	; 0x56a <__stack+0x10b>
     546:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <blue_mode13>
     54a:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <blue_mode13+0x1>
     54e:	45 2b       	or	r20, r21
     550:	61 f4       	brne	.+24     	; 0x56a <__stack+0x10b>
     552:	03 97       	sbiw	r24, 0x03	; 3
     554:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <green_mode13+0x1>
     558:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <green_mode13>
     55c:	2f 50       	subi	r18, 0x0F	; 15
     55e:	31 09       	sbc	r19, r1
     560:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <red_mode13+0x1>
     564:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <red_mode13>
     568:	f0 c0       	rjmp	.+480    	; 0x74a <__stack+0x2eb>
	   else {flag2 = 1;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <flag2+0x1>
     572:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <flag2>
	   if ( (flag1 == 1) && (flag2 == 1) && (flag3 == 0) &&(flag4 == 0) && (flag5 == 0)&& (blue_mode13 < 152) && (green_mode13 > 147) && (red_mode13 == 0)) {green_mode13 = green_mode13 - 3; blue_mode13 = blue_mode13 + 8;}//...->голубой
     576:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <flag3>
     57a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <flag3+0x1>
     57e:	89 2b       	or	r24, r25
     580:	61 f5       	brne	.+88     	; 0x5da <__stack+0x17b>
     582:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <flag4>
     586:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <flag4+0x1>
     58a:	89 2b       	or	r24, r25
     58c:	31 f5       	brne	.+76     	; 0x5da <__stack+0x17b>
     58e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <flag5>
     592:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <flag5+0x1>
     596:	89 2b       	or	r24, r25
     598:	01 f5       	brne	.+64     	; 0x5da <__stack+0x17b>
     59a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <blue_mode13>
     59e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <blue_mode13+0x1>
     5a2:	88 39       	cpi	r24, 0x98	; 152
     5a4:	91 05       	cpc	r25, r1
     5a6:	cc f4       	brge	.+50     	; 0x5da <__stack+0x17b>
     5a8:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <green_mode13>
     5ac:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <green_mode13+0x1>
     5b0:	24 39       	cpi	r18, 0x94	; 148
     5b2:	31 05       	cpc	r19, r1
     5b4:	94 f0       	brlt	.+36     	; 0x5da <__stack+0x17b>
     5b6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <red_mode13>
     5ba:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <red_mode13+0x1>
     5be:	45 2b       	or	r20, r21
     5c0:	61 f4       	brne	.+24     	; 0x5da <__stack+0x17b>
     5c2:	23 50       	subi	r18, 0x03	; 3
     5c4:	31 09       	sbc	r19, r1
     5c6:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <green_mode13+0x1>
     5ca:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <green_mode13>
     5ce:	08 96       	adiw	r24, 0x08	; 8
     5d0:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <blue_mode13+0x1>
     5d4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <blue_mode13>
     5d8:	b8 c0       	rjmp	.+368    	; 0x74a <__stack+0x2eb>
	   else {flag3 = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <flag3+0x1>
     5e2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <flag3>
	   if ( (flag1 == 1) && (flag2 == 1) && (flag3 == 1) && (flag4 == 0) && (flag5 == 0)&& (green_mode13 > 27) && (red_mode13 <30 ) && (blue_mode13 <182 )){blue_mode13 = blue_mode13 + 3; green_mode13 = green_mode13 - 12; red_mode13 = red_mode13 + 3; }//1
     5e6:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <flag4>
     5ea:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <flag4+0x1>
     5ee:	89 2b       	or	r24, r25
     5f0:	69 f5       	brne	.+90     	; 0x64c <__stack+0x1ed>
     5f2:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <flag5>
     5f6:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <flag5+0x1>
     5fa:	89 2b       	or	r24, r25
     5fc:	39 f5       	brne	.+78     	; 0x64c <__stack+0x1ed>
     5fe:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <green_mode13>
     602:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <green_mode13+0x1>
     606:	8c 31       	cpi	r24, 0x1C	; 28
     608:	91 05       	cpc	r25, r1
     60a:	04 f1       	brlt	.+64     	; 0x64c <__stack+0x1ed>
     60c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <red_mode13>
     610:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <red_mode13+0x1>
     614:	2e 31       	cpi	r18, 0x1E	; 30
     616:	31 05       	cpc	r19, r1
     618:	cc f4       	brge	.+50     	; 0x64c <__stack+0x1ed>
     61a:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <blue_mode13>
     61e:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <blue_mode13+0x1>
     622:	46 3b       	cpi	r20, 0xB6	; 182
     624:	51 05       	cpc	r21, r1
     626:	94 f4       	brge	.+36     	; 0x64c <__stack+0x1ed>
     628:	4d 5f       	subi	r20, 0xFD	; 253
     62a:	5f 4f       	sbci	r21, 0xFF	; 255
     62c:	50 93 27 02 	sts	0x0227, r21	; 0x800227 <blue_mode13+0x1>
     630:	40 93 26 02 	sts	0x0226, r20	; 0x800226 <blue_mode13>
     634:	0c 97       	sbiw	r24, 0x0c	; 12
     636:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <green_mode13+0x1>
     63a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <green_mode13>
     63e:	2d 5f       	subi	r18, 0xFD	; 253
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <red_mode13+0x1>
     646:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <red_mode13>
     64a:	7f c0       	rjmp	.+254    	; 0x74a <__stack+0x2eb>
	   else {flag4 = 1;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <flag4+0x1>
     654:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <flag4>
	   if ( (flag1 == 1) && (flag2 == 1) && (flag3 == 1) && (flag4 == 1) && (flag5 == 0)&& (blue_mode13 > 164) && (red_mode13 <165 ) && (green_mode13 >0 )){green_mode13 = green_mode13 - 3; blue_mode13 = blue_mode13 - 2; red_mode13 = red_mode13 + 15; }//2
     658:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <flag5>
     65c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <flag5+0x1>
     660:	89 2b       	or	r24, r25
     662:	39 f5       	brne	.+78     	; 0x6b2 <__stack+0x253>
     664:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <blue_mode13>
     668:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <blue_mode13+0x1>
     66c:	85 3a       	cpi	r24, 0xA5	; 165
     66e:	91 05       	cpc	r25, r1
     670:	04 f1       	brlt	.+64     	; 0x6b2 <__stack+0x253>
     672:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <red_mode13>
     676:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <red_mode13+0x1>
     67a:	25 3a       	cpi	r18, 0xA5	; 165
     67c:	31 05       	cpc	r19, r1
     67e:	cc f4       	brge	.+50     	; 0x6b2 <__stack+0x253>
     680:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <green_mode13>
     684:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <green_mode13+0x1>
     688:	14 16       	cp	r1, r20
     68a:	15 06       	cpc	r1, r21
     68c:	94 f4       	brge	.+36     	; 0x6b2 <__stack+0x253>
     68e:	43 50       	subi	r20, 0x03	; 3
     690:	51 09       	sbc	r21, r1
     692:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <green_mode13+0x1>
     696:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <green_mode13>
     69a:	02 97       	sbiw	r24, 0x02	; 2
     69c:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <blue_mode13+0x1>
     6a0:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <blue_mode13>
     6a4:	21 5f       	subi	r18, 0xF1	; 241
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <red_mode13+0x1>
     6ac:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <red_mode13>
     6b0:	4c c0       	rjmp	.+152    	; 0x74a <__stack+0x2eb>
	   else {flag5 = 1;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <flag5+0x1>
     6ba:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <flag5>
	   if ( (flag1 == 1) && (flag2 == 1) && (flag3 == 1) && (flag4 == 1) && (flag5 == 1) && (blue_mode13 > 2) && (red_mode13 <255 ) && (green_mode13 == 0 )){green_mode13 = 0; blue_mode13 = blue_mode13 - 18; red_mode13 = red_mode13 + 10; }//3   
     6be:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <blue_mode13>
     6c2:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <blue_mode13+0x1>
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	91 05       	cpc	r25, r1
     6ca:	ec f0       	brlt	.+58     	; 0x706 <__stack+0x2a7>
     6cc:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <red_mode13>
     6d0:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <red_mode13+0x1>
     6d4:	2f 3f       	cpi	r18, 0xFF	; 255
     6d6:	31 05       	cpc	r19, r1
     6d8:	b4 f4       	brge	.+44     	; 0x706 <__stack+0x2a7>
     6da:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <green_mode13>
     6de:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <green_mode13+0x1>
     6e2:	45 2b       	or	r20, r21
     6e4:	81 f4       	brne	.+32     	; 0x706 <__stack+0x2a7>
     6e6:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <green_mode13+0x1>
     6ea:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <green_mode13>
     6ee:	42 97       	sbiw	r24, 0x12	; 18
     6f0:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <blue_mode13+0x1>
     6f4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <blue_mode13>
     6f8:	26 5f       	subi	r18, 0xF6	; 246
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <red_mode13+0x1>
     700:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <red_mode13>
     704:	22 c0       	rjmp	.+68     	; 0x74a <__stack+0x2eb>
	   else { flag1 = flag2 = flag3 = flag4 = flag5 = 0; red_mode13 = 255; green_mode13 = 0; blue_mode13 = 0;}}}}}}
     706:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <flag5+0x1>
     70a:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <flag5>
     70e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <flag4+0x1>
     712:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <flag4>
     716:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <flag3+0x1>
     71a:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <flag3>
     71e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <flag2+0x1>
     722:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <flag2>
     726:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <flag1+0x1>
     72a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <flag1>
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <red_mode13+0x1>
     736:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <red_mode13>
     73a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <green_mode13+0x1>
     73e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <green_mode13>
     742:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <blue_mode13+0x1>
     746:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <blue_mode13>
	//------------------------------------------------------ 
	// выбор режима индикации clockmode
	if (clockmode == CLOCKMODE_CLOCK) print_all_number( hour*100+min, mode );
     74a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clockmode>
     74e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clockmode+0x1>
     752:	89 2b       	or	r24, r25
     754:	79 f4       	brne	.+30     	; 0x774 <__stack+0x315>
     756:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <hour>
     75a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <mode>
     75e:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <mode+0x1>
     762:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <min>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	34 e6       	ldi	r19, 0x64	; 100
     76a:	23 9f       	mul	r18, r19
     76c:	80 0d       	add	r24, r0
     76e:	91 1d       	adc	r25, r1
     770:	11 24       	eor	r1, r1
     772:	ee d5       	rcall	.+3036   	; 0x1350 <print_all_number>
	if (clockmode == CLOCKMODE_TEMPERATURE) print_all_number( (temperature>>1)*100+(temperature%2)*50, mode );
     774:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clockmode>
     778:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clockmode+0x1>
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	21 f5       	brne	.+72     	; 0x7c8 <__stack+0x369>
     780:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <temperature>
     784:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <temperature+0x1>
     788:	c9 01       	movw	r24, r18
     78a:	95 95       	asr	r25
     78c:	87 95       	ror	r24
     78e:	64 e6       	ldi	r22, 0x64	; 100
     790:	68 9f       	mul	r22, r24
     792:	a0 01       	movw	r20, r0
     794:	69 9f       	mul	r22, r25
     796:	50 0d       	add	r21, r0
     798:	11 24       	eor	r1, r1
     79a:	21 70       	andi	r18, 0x01	; 1
     79c:	30 78       	andi	r19, 0x80	; 128
     79e:	33 23       	and	r19, r19
     7a0:	34 f4       	brge	.+12     	; 0x7ae <__stack+0x34f>
     7a2:	21 50       	subi	r18, 0x01	; 1
     7a4:	31 09       	sbc	r19, r1
     7a6:	2e 6f       	ori	r18, 0xFE	; 254
     7a8:	3f 6f       	ori	r19, 0xFF	; 255
     7aa:	2f 5f       	subi	r18, 0xFF	; 255
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	62 e3       	ldi	r22, 0x32	; 50
     7b0:	62 9f       	mul	r22, r18
     7b2:	c0 01       	movw	r24, r0
     7b4:	63 9f       	mul	r22, r19
     7b6:	90 0d       	add	r25, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <mode>
     7be:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <mode+0x1>
     7c2:	84 0f       	add	r24, r20
     7c4:	95 1f       	adc	r25, r21
     7c6:	c4 d5       	rcall	.+2952   	; 0x1350 <print_all_number>
	if (clockmode == CLOCKMODE_DATE) print_all_number( month + date*100, mode );
     7c8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clockmode>
     7cc:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clockmode+0x1>
     7d0:	02 97       	sbiw	r24, 0x02	; 2
     7d2:	79 f4       	brne	.+30     	; 0x7f2 <__stack+0x393>
     7d4:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <date>
     7d8:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <mode>
     7dc:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <mode+0x1>
     7e0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <month>
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	34 e6       	ldi	r19, 0x64	; 100
     7e8:	23 9f       	mul	r18, r19
     7ea:	80 0d       	add	r24, r0
     7ec:	91 1d       	adc	r25, r1
     7ee:	11 24       	eor	r1, r1
     7f0:	af d5       	rcall	.+2910   	; 0x1350 <print_all_number>
	if (clockmode == CLOCKMODE_WEAKDAY) print_all_number( day*10, mode );
     7f2:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clockmode>
     7f6:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clockmode+0x1>
     7fa:	03 97       	sbiw	r24, 0x03	; 3
     7fc:	99 f4       	brne	.+38     	; 0x824 <__stack+0x3c5>
     7fe:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <mode>
     802:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <mode+0x1>
     806:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <day>
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	c9 01       	movw	r24, r18
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	22 0f       	add	r18, r18
     814:	33 1f       	adc	r19, r19
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	96 d5       	rcall	.+2860   	; 0x1350 <print_all_number>
	if (clockmode == CLOCKMODE_YEAR) print_all_number( 2000+year, mode );
     824:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clockmode>
     828:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clockmode+0x1>
     82c:	04 97       	sbiw	r24, 0x04	; 4
     82e:	51 f4       	brne	.+20     	; 0x844 <__stack+0x3e5>
     830:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <mode>
     834:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <mode+0x1>
     838:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <year>
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	80 53       	subi	r24, 0x30	; 48
     840:	98 4f       	sbci	r25, 0xF8	; 248
     842:	86 d5       	rcall	.+2828   	; 0x1350 <print_all_number>
	if (clockmode == CLOCKMODE_ALARMCLOCK) print_all_number( alarmhour*100+alarmmin, mode );
     844:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clockmode>
     848:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clockmode+0x1>
     84c:	05 97       	sbiw	r24, 0x05	; 5
     84e:	79 f4       	brne	.+30     	; 0x86e <__stack+0x40f>
     850:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <alarmhour>
     854:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <mode>
     858:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <mode+0x1>
     85c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <alarmmin>
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	34 e6       	ldi	r19, 0x64	; 100
     864:	23 9f       	mul	r18, r19
     866:	80 0d       	add	r24, r0
     868:	91 1d       	adc	r25, r1
     86a:	11 24       	eor	r1, r1
     86c:	71 d5       	rcall	.+2786   	; 0x1350 <print_all_number>
	//------------------------------------------------------
}
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti

00000890 <int_ini>:
//---------------------------------------------
//прерывания от кнопки для переключения режимов индикации 
void int_ini(void)
{
	//включим прерывания INT0 по нисходящему фронту
	MCUCR |= (1<<ISC01);
     890:	85 b7       	in	r24, 0x35	; 53
     892:	82 60       	ori	r24, 0x02	; 2
     894:	85 bf       	out	0x35, r24	; 53
	//разрешим внешние прерывания INT0
	GICR |= (1<<INT0);
     896:	8b b7       	in	r24, 0x3b	; 59
     898:	80 64       	ori	r24, 0x40	; 64
     89a:	8b bf       	out	0x3b, r24	; 59
     89c:	08 95       	ret

0000089e <__vector_1>:
}
//---------------------------------------------
//обработчик прерываний от кнопки выбора режимов
ISR(INT0_vect)
{
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	0f 92       	push	r0
     8a6:	11 24       	eor	r1, r1
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
	mode++;
     8ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <mode>
     8b0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <mode+0x1>
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <mode+0x1>
     8ba:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <mode>
	if (mode == 14)
     8be:	0e 97       	sbiw	r24, 0x0e	; 14
     8c0:	31 f4       	brne	.+12     	; 0x8ce <__vector_1+0x30>
	{
		mode = 1;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <mode+0x1>
     8ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <mode>
	}
}
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	0f 90       	pop	r0
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	0f 90       	pop	r0
     8d8:	1f 90       	pop	r1
     8da:	18 95       	reti

000008dc <port_ini>:
//---------------------------------------------
//инициализация портов
void port_ini(void)
{
	//Включим ножку INT0 (PD2) на вход
	DDRD &= ~(0b00000100);
     8dc:	81 b3       	in	r24, 0x11	; 17
     8de:	8b 7f       	andi	r24, 0xFB	; 251
     8e0:	81 bb       	out	0x11, r24	; 17
	//Подтянем резистор на ножке INT0 (PD2) к питанию
	PORTD |= 0b00000100;
     8e2:	82 b3       	in	r24, 0x12	; 18
     8e4:	84 60       	ori	r24, 0x04	; 4
     8e6:	82 bb       	out	0x12, r24	; 18
	
	DDRB = 0xFF;//установка ножек на выход
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;
     8ec:	18 ba       	out	0x18, r1	; 24
	
	//будильник
	DDRD |= (1<<DDRD); // ножку PD0 на выход
     8ee:	21 b3       	in	r18, 0x11	; 17
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <port_ini+0x1e>
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	2a 95       	dec	r18
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <port_ini+0x1a>
     8fe:	91 b3       	in	r25, 0x11	; 17
     900:	89 2b       	or	r24, r25
     902:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1<<PORTD0); //логическая 1
     904:	82 b3       	in	r24, 0x12	; 18
     906:	81 60       	ori	r24, 0x01	; 1
     908:	82 bb       	out	0x12, r24	; 18
	
	DDRD &= ~(0b01000000); //кнопка PD6 - на вход
     90a:	81 b3       	in	r24, 0x11	; 17
     90c:	8f 7b       	andi	r24, 0xBF	; 191
     90e:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0b01000000;//Подтянем резистор на ножке PD6 к питанию
     910:	82 b3       	in	r24, 0x12	; 18
     912:	80 64       	ori	r24, 0x40	; 64
     914:	82 bb       	out	0x12, r24	; 18
     916:	08 95       	ret

00000918 <alarm>:
}
//---------------------------------------------
//функция звонка будильника
void alarm(void)
{
	PORTD&=~(1<<PORTD0); //логический 0
     918:	82 b3       	in	r24, 0x12	; 18
     91a:	8e 7f       	andi	r24, 0xFE	; 254
     91c:	82 bb       	out	0x12, r24	; 18
     91e:	8f e5       	ldi	r24, 0x5F	; 95
     920:	9a ee       	ldi	r25, 0xEA	; 234
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	f1 f7       	brne	.-4      	; 0x922 <alarm+0xa>
     926:	00 c0       	rjmp	.+0      	; 0x928 <alarm+0x10>
     928:	00 00       	nop
	_delay_ms(15);
	PORTD |= (1<<PORTD0); //логическая 1
     92a:	82 b3       	in	r24, 0x12	; 18
     92c:	81 60       	ori	r24, 0x01	; 1
     92e:	82 bb       	out	0x12, r24	; 18
     930:	08 95       	ret

00000932 <main>:
}
//---------------------------------------------
int main(void)
{
	alarm_now_mode = 0;
     932:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <alarm_now_mode>
	button_counter = 0;
     936:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <button_counter+0x1>
     93a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <button_counter>
	clock_change_mode = MODE_WITHOUT_CHANGE;
     93e:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <clock_change_mode>
	clock_incr_mode = MODE_NO_INC;
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <clock_incr_mode>
	alarm_flag = 0;
     948:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <alarm_flag>
	unsigned int adc_value;
    port_ini();
     94c:	c7 df       	rcall	.-114    	; 0x8dc <port_ini>
    init_button_timer();//инициализация нулевого таймера
     94e:	cd db       	rcall	.-2150   	; 0xea <init_button_timer>
	I2C_Init();
     950:	ff d1       	rcall	.+1022   	; 0xd50 <I2C_Init>
	int_ini();
     952:	9e df       	rcall	.-196    	; 0x890 <int_ini>
	ADC_Init();
     954:	b8 db       	rcall	.-2192   	; 0xc6 <ADC_Init>
	RTC_init();//для DS3231
     956:	2f d1       	rcall	.+606    	; 0xbb6 <RTC_init>
	sei();
     958:	78 94       	sei
	timer_ini();//инициализация таймера
     95a:	01 dd       	rcall	.-1534   	; 0x35e <timer_ini>
	
	if(EEPROM_read(1) > 1) EEPROM_write(1,0); //если в ячейке число более 1 (либо ни разу не использовалось,
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	f5 dc       	rcall	.-1558   	; 0x34c <EEPROM_read>
     962:	82 30       	cpi	r24, 0x02	; 2
     964:	20 f0       	brcs	.+8      	; 0x96e <main+0x3c>
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	e3 dc       	rcall	.-1594   	; 0x334 <EEPROM_write>
	//либо какие то странные значения, либо использовалось в других целях), то установим туда 0
	alarmmode = EEPROM_read(1); //считаем флаг задействования будильника из памяти EEPROM
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	ec dc       	rcall	.-1576   	; 0x34c <EEPROM_read>
     974:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <alarmmode>
	if(EEPROM_read(2)>23) EEPROM_write(2,0); //если в ячейке число более 23 (либо ни разу не использовалось,
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	e7 dc       	rcall	.-1586   	; 0x34c <EEPROM_read>
     97e:	88 31       	cpi	r24, 0x18	; 24
     980:	20 f0       	brcs	.+8      	; 0x98a <main+0x58>
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	d5 dc       	rcall	.-1622   	; 0x334 <EEPROM_write>
	//либо какие то странные значения, либо использовалось в других целях), то установим туда 0
	if(EEPROM_read(3)>59) EEPROM_write(3,0); //если в ячейке число более 59 (либо ни разу не использовалось,
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	de dc       	rcall	.-1604   	; 0x34c <EEPROM_read>
     990:	8c 33       	cpi	r24, 0x3C	; 60
     992:	20 f0       	brcs	.+8      	; 0x99c <main+0x6a>
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	cc dc       	rcall	.-1640   	; 0x334 <EEPROM_write>
     99c:	2f ef       	ldi	r18, 0xFF	; 255
     99e:	83 ed       	ldi	r24, 0xD3	; 211
     9a0:	90 e3       	ldi	r25, 0x30	; 48
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	80 40       	sbci	r24, 0x00	; 0
     9a6:	90 40       	sbci	r25, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <main+0x70>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <main+0x7a>
     9ac:	00 00       	nop
	  month = RTC_ConvertFromDec(month); //Преобразуем в десятичный формат
	  date = RTC_ConvertFromDec(date); //Преобразуем в десятичный формат
	  */
	  //------------------------------------------------------
	  //Читаем время (для DS3231) - по сути функция RTC_read_time
	  I2C_StartCondition();               // запуск i2c
     9ae:	d3 d1       	rcall	.+934    	; 0xd56 <I2C_StartCondition>
	  I2C_SendByte(0b11010000);   // передача адреса устройства, режим записи
     9b0:	80 ed       	ldi	r24, 0xD0	; 208
     9b2:	da d1       	rcall	.+948    	; 0xd68 <I2C_SendByte>
	  I2C_SendByte(0x00);            // передача адреса памяти
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	d8 d1       	rcall	.+944    	; 0xd68 <I2C_SendByte>
	  I2C_StopCondition();                // остановка i2c
     9b8:	d4 d1       	rcall	.+936    	; 0xd62 <I2C_StopCondition>
	  
	  I2C_StartCondition();               // запуск i2c
     9ba:	cd d1       	rcall	.+922    	; 0xd56 <I2C_StartCondition>
	  I2C_SendByte(0b11010001);    // передача адреса устройства, режим чтения
     9bc:	81 ed       	ldi	r24, 0xD1	; 209
     9be:	d4 d1       	rcall	.+936    	; 0xd68 <I2C_SendByte>
	  sec = RTC_ConvertFromDec(I2C_ReadByte());     // чтение секунд, ACK
     9c0:	da d1       	rcall	.+948    	; 0xd76 <I2C_ReadByte>
     9c2:	ee d0       	rcall	.+476    	; 0xba0 <RTC_ConvertFromDec>
     9c4:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <sec>
	  min = RTC_ConvertFromDec(I2C_ReadByte());     // чтение минут, ACK
     9c8:	d6 d1       	rcall	.+940    	; 0xd76 <I2C_ReadByte>
     9ca:	ea d0       	rcall	.+468    	; 0xba0 <RTC_ConvertFromDec>
     9cc:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <min>
	  hour = RTC_ConvertFromDec(I2C_ReadByte());    // чтение часов, ACK
     9d0:	d2 d1       	rcall	.+932    	; 0xd76 <I2C_ReadByte>
     9d2:	e6 d0       	rcall	.+460    	; 0xba0 <RTC_ConvertFromDec>
     9d4:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <hour>
	  day = RTC_ConvertFromDec(I2C_ReadByte());    // чтение день недели, ACK
     9d8:	ce d1       	rcall	.+924    	; 0xd76 <I2C_ReadByte>
     9da:	e2 d0       	rcall	.+452    	; 0xba0 <RTC_ConvertFromDec>
     9dc:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <day>
	  date = RTC_ConvertFromDec(I2C_ReadByte());     // чтение число, ACK
     9e0:	ca d1       	rcall	.+916    	; 0xd76 <I2C_ReadByte>
     9e2:	de d0       	rcall	.+444    	; 0xba0 <RTC_ConvertFromDec>
     9e4:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <date>
	  month = RTC_ConvertFromDec(I2C_ReadByte());   // чтение месяц, ACK
     9e8:	c6 d1       	rcall	.+908    	; 0xd76 <I2C_ReadByte>
     9ea:	da d0       	rcall	.+436    	; 0xba0 <RTC_ConvertFromDec>
     9ec:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <month>
	  year = RTC_ConvertFromDec(I2C_ReadLastByte());    // чтение год, NACK
     9f0:	c9 d1       	rcall	.+914    	; 0xd84 <I2C_ReadLastByte>
     9f2:	d6 d0       	rcall	.+428    	; 0xba0 <RTC_ConvertFromDec>
     9f4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <year>
	  I2C_StopCondition();                // остановка i2c
     9f8:	b4 d1       	rcall	.+872    	; 0xd62 <I2C_StopCondition>
	  //------------------------------------------------------
	  //контроль уровня яркости
	  if ((adc_value = ADC_convert()) > 240)
     9fa:	6f db       	rcall	.-2338   	; 0xda <ADC_convert>
     9fc:	81 3f       	cpi	r24, 0xF1	; 241
     9fe:	91 05       	cpc	r25, r1
     a00:	68 f0       	brcs	.+26     	; 0xa1c <main+0xea>
	  {
		  BRIGHTNESS = 0.05;
     a02:	8d ec       	ldi	r24, 0xCD	; 205
     a04:	9c ec       	ldi	r25, 0xCC	; 204
     a06:	ac e4       	ldi	r26, 0x4C	; 76
     a08:	bd e3       	ldi	r27, 0x3D	; 61
     a0a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <BRIGHTNESS>
     a0e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <BRIGHTNESS+0x1>
     a12:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <BRIGHTNESS+0x2>
     a16:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <BRIGHTNESS+0x3>
     a1a:	0c c0       	rjmp	.+24     	; 0xa34 <main+0x102>
	  }
	  else
	  {
		  BRIGHTNESS = 1;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e8       	ldi	r26, 0x80	; 128
     a22:	bf e3       	ldi	r27, 0x3F	; 63
     a24:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <BRIGHTNESS>
     a28:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <BRIGHTNESS+0x1>
     a2c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <BRIGHTNESS+0x2>
     a30:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <BRIGHTNESS+0x3>
	  }
	  //------------------------------------------------------
	  temperature = converttemp(dt_check()); //измеряем температуру
     a34:	56 dc       	rcall	.-1876   	; 0x2e2 <dt_check>
     a36:	77 dc       	rcall	.-1810   	; 0x326 <converttemp>
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <temperature+0x1>
     a3e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <temperature>
	  //------------------------------------------------------
	  //считаем показания будильника
	  alarmhour = EEPROM_read(2);
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	82 dc       	rcall	.-1788   	; 0x34c <EEPROM_read>
     a48:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <alarmhour>
	  alarmmin = EEPROM_read(3);
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	7d dc       	rcall	.-1798   	; 0x34c <EEPROM_read>
     a52:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <alarmmin>
	  
	  if ((alarmmin == min) && (alarmhour == hour) && (clock_change_mode == MODE_WITHOUT_CHANGE)) 
     a56:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <min>
     a5a:	89 13       	cpse	r24, r25
     a5c:	15 c0       	rjmp	.+42     	; 0xa88 <main+0x156>
     a5e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <alarmhour>
     a62:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <hour>
     a66:	98 13       	cpse	r25, r24
     a68:	0f c0       	rjmp	.+30     	; 0xa88 <main+0x156>
     a6a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <clock_change_mode>
     a6e:	81 11       	cpse	r24, r1
     a70:	0b c0       	rjmp	.+22     	; 0xa88 <main+0x156>
	  {
		//добавим условие, чтобы не включить повторно после короткого нажатия кнопки
		if (alarm_flag == 0) alarm_now_mode = 1;  
     a72:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <alarm_flag>
     a76:	81 11       	cpse	r24, r1
     a78:	03 c0       	rjmp	.+6      	; 0xa80 <main+0x14e>
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <alarm_now_mode>
		alarm_flag = 1;  
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <alarm_flag>
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <main+0x15a>
	  }
	  else alarm_flag = 0;
     a88:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <alarm_flag>
	  //------------------------------------------------------
	  if ((Flag ==1)||(Flag ==2)) clockmode = CLOCKMODE_CLOCK;
     a8c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Flag>
     a90:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <Flag+0x1>
     a94:	9c 01       	movw	r18, r24
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	31 09       	sbc	r19, r1
     a9a:	22 30       	cpi	r18, 0x02	; 2
     a9c:	31 05       	cpc	r19, r1
     a9e:	28 f4       	brcc	.+10     	; 0xaaa <main+0x178>
     aa0:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <clockmode+0x1>
     aa4:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <clockmode>
     aa8:	4e c0       	rjmp	.+156    	; 0xb46 <main+0x214>
	  else if ((Flag ==3)||(Flag ==4)) clockmode = CLOCKMODE_DATE;
     aaa:	9c 01       	movw	r18, r24
     aac:	23 50       	subi	r18, 0x03	; 3
     aae:	31 09       	sbc	r19, r1
     ab0:	22 30       	cpi	r18, 0x02	; 2
     ab2:	31 05       	cpc	r19, r1
     ab4:	38 f4       	brcc	.+14     	; 0xac4 <main+0x192>
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clockmode+0x1>
     abe:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clockmode>
     ac2:	41 c0       	rjmp	.+130    	; 0xb46 <main+0x214>
	  else if (Flag ==5) clockmode = CLOCKMODE_YEAR;
     ac4:	85 30       	cpi	r24, 0x05	; 5
     ac6:	91 05       	cpc	r25, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <main+0x1a6>
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clockmode+0x1>
     ad2:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clockmode>
     ad6:	37 c0       	rjmp	.+110    	; 0xb46 <main+0x214>
	  else if (Flag ==6) clockmode = CLOCKMODE_WEAKDAY;
     ad8:	86 30       	cpi	r24, 0x06	; 6
     ada:	91 05       	cpc	r25, r1
     adc:	39 f4       	brne	.+14     	; 0xaec <main+0x1ba>
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clockmode+0x1>
     ae6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clockmode>
     aea:	2d c0       	rjmp	.+90     	; 0xb46 <main+0x214>
	  else if ((Flag ==7)||(Flag ==8)) clockmode = CLOCKMODE_ALARMCLOCK;
     aec:	07 97       	sbiw	r24, 0x07	; 7
     aee:	02 97       	sbiw	r24, 0x02	; 2
     af0:	38 f4       	brcc	.+14     	; 0xb00 <main+0x1ce>
     af2:	85 e0       	ldi	r24, 0x05	; 5
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clockmode+0x1>
     afa:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clockmode>
     afe:	23 c0       	rjmp	.+70     	; 0xb46 <main+0x214>
	  else
	  {
	  if ((sec<30)||(sec>41)) clockmode = CLOCKMODE_CLOCK;
     b00:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <sec>
     b04:	92 ee       	ldi	r25, 0xE2	; 226
     b06:	98 0f       	add	r25, r24
     b08:	9c 30       	cpi	r25, 0x0C	; 12
     b0a:	28 f0       	brcs	.+10     	; 0xb16 <main+0x1e4>
     b0c:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <clockmode+0x1>
     b10:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <clockmode>
     b14:	18 c0       	rjmp	.+48     	; 0xb46 <main+0x214>
	  else if (sec<34) clockmode = CLOCKMODE_TEMPERATURE;
     b16:	82 32       	cpi	r24, 0x22	; 34
     b18:	38 f4       	brcc	.+14     	; 0xb28 <main+0x1f6>
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clockmode+0x1>
     b22:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clockmode>
     b26:	0f c0       	rjmp	.+30     	; 0xb46 <main+0x214>
	  else if (sec<38) clockmode = CLOCKMODE_DATE;
     b28:	86 32       	cpi	r24, 0x26	; 38
     b2a:	38 f4       	brcc	.+14     	; 0xb3a <main+0x208>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clockmode+0x1>
     b34:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clockmode>
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <main+0x214>
	  else clockmode = CLOCKMODE_WEAKDAY;
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <clockmode+0x1>
     b42:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <clockmode>
	  }
	  //------------------------------------------------------
	  if ((clock_change_mode != MODE_WITHOUT_CHANGE) && (clock_incr_mode == MODE_INC))
     b46:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <clock_change_mode>
     b4a:	88 23       	and	r24, r24
     b4c:	41 f0       	breq	.+16     	; 0xb5e <main+0x22c>
     b4e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <clock_incr_mode>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	21 f4       	brne	.+8      	; 0xb5e <main+0x22c>
	  {
		  ModifyRTC();
     b56:	3a d0       	rcall	.+116    	; 0xbcc <ModifyRTC>
		  clock_incr_mode = MODE_NO_INC;
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <clock_incr_mode>
	  }
	  //------------------------------------------------------
	  if((alarm_flag == 1) && (alarm_now_mode == 1)) alarm();
     b5e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <alarm_flag>
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	31 f4       	brne	.+12     	; 0xb72 <main+0x240>
     b66:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <alarm_now_mode>
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	11 f4       	brne	.+4      	; 0xb72 <main+0x240>
     b6e:	d4 de       	rcall	.-600    	; 0x918 <alarm>
     b70:	1e cf       	rjmp	.-452    	; 0x9ae <main+0x7c>
	  else PORTD |= (1<<PORTD0);//логическая 1
     b72:	82 b3       	in	r24, 0x12	; 18
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	82 bb       	out	0x12, r24	; 18
     b78:	1a cf       	rjmp	.-460    	; 0x9ae <main+0x7c>

00000b7a <RTC_ConvertFromBinDec>:
	I2C_SendByte(RTC_ConvertFromBinDec(wday));       // 0x03 день недели (воскресенье - 1, пн 2, вт 3, ср 4, чт 5, пт 6, сб 7)
	I2C_SendByte(RTC_ConvertFromBinDec(day));        // 0x04 день месяц
	I2C_SendByte(RTC_ConvertFromBinDec(month));      // 0x05 месяц
	I2C_SendByte(RTC_ConvertFromBinDec(year));       // 0x06 год
	I2C_StopCondition();                // остановка i2c
}
     b7a:	9d ec       	ldi	r25, 0xCD	; 205
     b7c:	89 9f       	mul	r24, r25
     b7e:	91 2d       	mov	r25, r1
     b80:	11 24       	eor	r1, r1
     b82:	96 95       	lsr	r25
     b84:	96 95       	lsr	r25
     b86:	96 95       	lsr	r25
     b88:	20 e1       	ldi	r18, 0x10	; 16
     b8a:	92 9f       	mul	r25, r18
     b8c:	a0 01       	movw	r20, r0
     b8e:	11 24       	eor	r1, r1
     b90:	99 0f       	add	r25, r25
     b92:	29 2f       	mov	r18, r25
     b94:	22 0f       	add	r18, r18
     b96:	22 0f       	add	r18, r18
     b98:	92 0f       	add	r25, r18
     b9a:	89 1b       	sub	r24, r25
     b9c:	84 2b       	or	r24, r20
     b9e:	08 95       	ret

00000ba0 <RTC_ConvertFromDec>:
     ba0:	98 2f       	mov	r25, r24
     ba2:	92 95       	swap	r25
     ba4:	9f 70       	andi	r25, 0x0F	; 15
     ba6:	99 0f       	add	r25, r25
     ba8:	29 2f       	mov	r18, r25
     baa:	22 0f       	add	r18, r18
     bac:	22 0f       	add	r18, r18
     bae:	92 0f       	add	r25, r18
     bb0:	8f 70       	andi	r24, 0x0F	; 15
     bb2:	89 0f       	add	r24, r25
     bb4:	08 95       	ret

00000bb6 <RTC_init>:
     bb6:	cf d0       	rcall	.+414    	; 0xd56 <I2C_StartCondition>
     bb8:	80 ed       	ldi	r24, 0xD0	; 208
     bba:	d6 d0       	rcall	.+428    	; 0xd68 <I2C_SendByte>
     bbc:	8e e0       	ldi	r24, 0x0E	; 14
     bbe:	d4 d0       	rcall	.+424    	; 0xd68 <I2C_SendByte>
     bc0:	80 e2       	ldi	r24, 0x20	; 32
     bc2:	d2 d0       	rcall	.+420    	; 0xd68 <I2C_SendByte>
     bc4:	88 e0       	ldi	r24, 0x08	; 8
     bc6:	d0 d0       	rcall	.+416    	; 0xd68 <I2C_SendByte>
     bc8:	cc d0       	rcall	.+408    	; 0xd62 <I2C_StopCondition>
     bca:	08 95       	ret

00000bcc <ModifyRTC>:
	t2=t2*5;
}
*/
void ModifyRTC(void)
{
	I2C_StartCondition();
     bcc:	c4 d0       	rcall	.+392    	; 0xd56 <I2C_StartCondition>
	I2C_SendByte(0b11010000);
     bce:	80 ed       	ldi	r24, 0xD0	; 208
     bd0:	cb d0       	rcall	.+406    	; 0xd68 <I2C_SendByte>
	switch(clock_change_mode)
     bd2:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <clock_change_mode>
     bd6:	8e 2f       	mov	r24, r30
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	fc 01       	movw	r30, r24
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	e8 30       	cpi	r30, 0x08	; 8
     be0:	f1 05       	cpc	r31, r1
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <ModifyRTC+0x1a>
     be4:	b3 c0       	rjmp	.+358    	; 0xd4c <ModifyRTC+0x180>
     be6:	ed 5e       	subi	r30, 0xED	; 237
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	09 94       	ijmp
	{
		case MODE_CHANGE_HOURS: //часы
		{
			I2C_SendByte(2);//Переходим на 0x02 — байт часов
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	bc d0       	rcall	.+376    	; 0xd68 <I2C_SendByte>
			if (hour < 23) I2C_SendByte(RTC_ConvertFromBinDec( hour+1 ));
     bf0:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <hour>
     bf4:	87 31       	cpi	r24, 0x17	; 23
     bf6:	20 f4       	brcc	.+8      	; 0xc00 <ModifyRTC+0x34>
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	bf df       	rcall	.-130    	; 0xb7a <RTC_ConvertFromBinDec>
     bfc:	b5 d0       	rcall	.+362    	; 0xd68 <I2C_SendByte>
     bfe:	a6 c0       	rjmp	.+332    	; 0xd4c <ModifyRTC+0x180>
			else I2C_SendByte(RTC_ConvertFromBinDec(0));
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	bb df       	rcall	.-138    	; 0xb7a <RTC_ConvertFromBinDec>
     c04:	b1 d0       	rcall	.+354    	; 0xd68 <I2C_SendByte>
     c06:	a2 c0       	rjmp	.+324    	; 0xd4c <ModifyRTC+0x180>
			break;
		}
		case MODE_CHANGE_MINUTES: // минуты
		{
			I2C_SendByte(1);//Переходим на 0x01 — байт минут
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	ae d0       	rcall	.+348    	; 0xd68 <I2C_SendByte>
			if(min<59) I2C_SendByte(RTC_ConvertFromBinDec(min+1));
     c0c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <min>
     c10:	8b 33       	cpi	r24, 0x3B	; 59
     c12:	20 f4       	brcc	.+8      	; 0xc1c <ModifyRTC+0x50>
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	b1 df       	rcall	.-158    	; 0xb7a <RTC_ConvertFromBinDec>
     c18:	a7 d0       	rcall	.+334    	; 0xd68 <I2C_SendByte>
     c1a:	98 c0       	rjmp	.+304    	; 0xd4c <ModifyRTC+0x180>
			else I2C_SendByte(RTC_ConvertFromBinDec(0));
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	ad df       	rcall	.-166    	; 0xb7a <RTC_ConvertFromBinDec>
     c20:	a3 d0       	rcall	.+326    	; 0xd68 <I2C_SendByte>
     c22:	94 c0       	rjmp	.+296    	; 0xd4c <ModifyRTC+0x180>
			break;
		}
		case MODE_CHANGE_DATE: // дата
		{
			I2C_SendByte(4);//Переходим на 0x04 — байт даты
     c24:	84 e0       	ldi	r24, 0x04	; 4
     c26:	a0 d0       	rcall	.+320    	; 0xd68 <I2C_SendByte>
			if (month==2) //февраль
     c28:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <month>
     c2c:	82 30       	cpi	r24, 0x02	; 2
     c2e:	e1 f4       	brne	.+56     	; 0xc68 <ModifyRTC+0x9c>
			{
				if(year%4==0) //високосный год
     c30:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <year>
     c34:	83 70       	andi	r24, 0x03	; 3
     c36:	61 f4       	brne	.+24     	; 0xc50 <ModifyRTC+0x84>
				{
					if(date<29) I2C_SendByte(RTC_ConvertFromBinDec(date+1));
     c38:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <date>
     c3c:	8d 31       	cpi	r24, 0x1D	; 29
     c3e:	20 f4       	brcc	.+8      	; 0xc48 <ModifyRTC+0x7c>
     c40:	8f 5f       	subi	r24, 0xFF	; 255
     c42:	9b df       	rcall	.-202    	; 0xb7a <RTC_ConvertFromBinDec>
     c44:	91 d0       	rcall	.+290    	; 0xd68 <I2C_SendByte>
     c46:	82 c0       	rjmp	.+260    	; 0xd4c <ModifyRTC+0x180>
					else I2C_SendByte(RTC_ConvertFromBinDec(1));
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	97 df       	rcall	.-210    	; 0xb7a <RTC_ConvertFromBinDec>
     c4c:	8d d0       	rcall	.+282    	; 0xd68 <I2C_SendByte>
     c4e:	7e c0       	rjmp	.+252    	; 0xd4c <ModifyRTC+0x180>
				}
				else
				{
					if(date<28) I2C_SendByte(RTC_ConvertFromBinDec(date+1));
     c50:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <date>
     c54:	8c 31       	cpi	r24, 0x1C	; 28
     c56:	20 f4       	brcc	.+8      	; 0xc60 <ModifyRTC+0x94>
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	8f df       	rcall	.-226    	; 0xb7a <RTC_ConvertFromBinDec>
     c5c:	85 d0       	rcall	.+266    	; 0xd68 <I2C_SendByte>
     c5e:	76 c0       	rjmp	.+236    	; 0xd4c <ModifyRTC+0x180>
					else I2C_SendByte(RTC_ConvertFromBinDec(1));
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	8b df       	rcall	.-234    	; 0xb7a <RTC_ConvertFromBinDec>
     c64:	81 d0       	rcall	.+258    	; 0xd68 <I2C_SendByte>
     c66:	72 c0       	rjmp	.+228    	; 0xd4c <ModifyRTC+0x180>
				}
			}
			else if ((month==4)|(month==6)|(month==9)|(month==11))
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	09 f0       	breq	.+2      	; 0xc70 <ModifyRTC+0xa4>
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	86 30       	cpi	r24, 0x06	; 6
     c74:	09 f0       	breq	.+2      	; 0xc78 <ModifyRTC+0xac>
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	29 2b       	or	r18, r25
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	89 30       	cpi	r24, 0x09	; 9
     c7e:	09 f0       	breq	.+2      	; 0xc82 <ModifyRTC+0xb6>
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	31 e0       	ldi	r19, 0x01	; 1
     c84:	8b 30       	cpi	r24, 0x0B	; 11
     c86:	09 f0       	breq	.+2      	; 0xc8a <ModifyRTC+0xbe>
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	92 2b       	or	r25, r18
     c8c:	11 f4       	brne	.+4      	; 0xc92 <ModifyRTC+0xc6>
     c8e:	33 23       	and	r19, r19
     c90:	61 f0       	breq	.+24     	; 0xcaa <ModifyRTC+0xde>
			{
				if(date<30) I2C_SendByte(RTC_ConvertFromBinDec(date+1));
     c92:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <date>
     c96:	8e 31       	cpi	r24, 0x1E	; 30
     c98:	20 f4       	brcc	.+8      	; 0xca2 <ModifyRTC+0xd6>
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	6e df       	rcall	.-292    	; 0xb7a <RTC_ConvertFromBinDec>
     c9e:	64 d0       	rcall	.+200    	; 0xd68 <I2C_SendByte>
     ca0:	55 c0       	rjmp	.+170    	; 0xd4c <ModifyRTC+0x180>
				else I2C_SendByte(RTC_ConvertFromBinDec(1));
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	6a df       	rcall	.-300    	; 0xb7a <RTC_ConvertFromBinDec>
     ca6:	60 d0       	rcall	.+192    	; 0xd68 <I2C_SendByte>
     ca8:	51 c0       	rjmp	.+162    	; 0xd4c <ModifyRTC+0x180>
			}
			else
			{
				if(date<31) I2C_SendByte(RTC_ConvertFromBinDec(date+1));
     caa:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <date>
     cae:	8f 31       	cpi	r24, 0x1F	; 31
     cb0:	20 f4       	brcc	.+8      	; 0xcba <ModifyRTC+0xee>
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	62 df       	rcall	.-316    	; 0xb7a <RTC_ConvertFromBinDec>
     cb6:	58 d0       	rcall	.+176    	; 0xd68 <I2C_SendByte>
     cb8:	49 c0       	rjmp	.+146    	; 0xd4c <ModifyRTC+0x180>
				else I2C_SendByte(RTC_ConvertFromBinDec(1));
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	5e df       	rcall	.-324    	; 0xb7a <RTC_ConvertFromBinDec>
     cbe:	54 d0       	rcall	.+168    	; 0xd68 <I2C_SendByte>
     cc0:	45 c0       	rjmp	.+138    	; 0xd4c <ModifyRTC+0x180>
			}
			break;
		}
		case MODE_CHANGE_MONTH: // месяц
		{
			I2C_SendByte(5);//Переходим на 0x05 — байт месяца
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	51 d0       	rcall	.+162    	; 0xd68 <I2C_SendByte>
			if(month<12) I2C_SendByte(RTC_ConvertFromBinDec(month+1));
     cc6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <month>
     cca:	8c 30       	cpi	r24, 0x0C	; 12
     ccc:	20 f4       	brcc	.+8      	; 0xcd6 <ModifyRTC+0x10a>
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	54 df       	rcall	.-344    	; 0xb7a <RTC_ConvertFromBinDec>
     cd2:	4a d0       	rcall	.+148    	; 0xd68 <I2C_SendByte>
     cd4:	3b c0       	rjmp	.+118    	; 0xd4c <ModifyRTC+0x180>
			else I2C_SendByte(RTC_ConvertFromBinDec(1));
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	50 df       	rcall	.-352    	; 0xb7a <RTC_ConvertFromBinDec>
     cda:	46 d0       	rcall	.+140    	; 0xd68 <I2C_SendByte>
     cdc:	37 c0       	rjmp	.+110    	; 0xd4c <ModifyRTC+0x180>
			break;
		}
		case MODE_CHANGE_YEAR: // год
		{
			I2C_SendByte(6);//Переходим на 0x06 — байт года
     cde:	86 e0       	ldi	r24, 0x06	; 6
     ce0:	43 d0       	rcall	.+134    	; 0xd68 <I2C_SendByte>
			if(year<99) I2C_SendByte(RTC_ConvertFromBinDec(year+1));
     ce2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <year>
     ce6:	83 36       	cpi	r24, 0x63	; 99
     ce8:	20 f4       	brcc	.+8      	; 0xcf2 <ModifyRTC+0x126>
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	46 df       	rcall	.-372    	; 0xb7a <RTC_ConvertFromBinDec>
     cee:	3c d0       	rcall	.+120    	; 0xd68 <I2C_SendByte>
     cf0:	2d c0       	rjmp	.+90     	; 0xd4c <ModifyRTC+0x180>
			else I2C_SendByte(RTC_ConvertFromBinDec(1));
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	42 df       	rcall	.-380    	; 0xb7a <RTC_ConvertFromBinDec>
     cf6:	38 d0       	rcall	.+112    	; 0xd68 <I2C_SendByte>
     cf8:	29 c0       	rjmp	.+82     	; 0xd4c <ModifyRTC+0x180>
			break;
		}
		case MODE_CHANGE_WEAKDAY: // день недели
		{
			I2C_SendByte(3);//Переходим на 0x03 — байт дня недели
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	35 d0       	rcall	.+106    	; 0xd68 <I2C_SendByte>
			if(day<7) I2C_SendByte(RTC_ConvertFromBinDec(day+1));
     cfe:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <day>
     d02:	87 30       	cpi	r24, 0x07	; 7
     d04:	20 f4       	brcc	.+8      	; 0xd0e <ModifyRTC+0x142>
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	38 df       	rcall	.-400    	; 0xb7a <RTC_ConvertFromBinDec>
     d0a:	2e d0       	rcall	.+92     	; 0xd68 <I2C_SendByte>
     d0c:	1f c0       	rjmp	.+62     	; 0xd4c <ModifyRTC+0x180>
			else I2C_SendByte(RTC_ConvertFromBinDec(1));
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	34 df       	rcall	.-408    	; 0xb7a <RTC_ConvertFromBinDec>
     d12:	2a d0       	rcall	.+84     	; 0xd68 <I2C_SendByte>
     d14:	1b c0       	rjmp	.+54     	; 0xd4c <ModifyRTC+0x180>
			break;
		}
		case MODE_CHANGE_ALARM_HOURS: // часы будильника
		{
			if(alarmhour<23) EEPROM_write(2,alarmhour+1);
     d16:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <alarmhour>
     d1a:	67 31       	cpi	r22, 0x17	; 23
     d1c:	28 f4       	brcc	.+10     	; 0xd28 <ModifyRTC+0x15c>
     d1e:	6f 5f       	subi	r22, 0xFF	; 255
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	07 db       	rcall	.-2546   	; 0x334 <EEPROM_write>
     d26:	12 c0       	rjmp	.+36     	; 0xd4c <ModifyRTC+0x180>
			else EEPROM_write(2,0);
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 db       	rcall	.-2556   	; 0x334 <EEPROM_write>
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <ModifyRTC+0x180>
			break;
		}
		case MODE_CHANGE_ALARM_MINUTES: // минуты будильника
		{
			if(alarmmin<59) EEPROM_write(3,alarmmin+1);
     d32:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <alarmmin>
     d36:	6b 33       	cpi	r22, 0x3B	; 59
     d38:	28 f4       	brcc	.+10     	; 0xd44 <ModifyRTC+0x178>
     d3a:	6f 5f       	subi	r22, 0xFF	; 255
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	f9 da       	rcall	.-2574   	; 0x334 <EEPROM_write>
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <ModifyRTC+0x180>
			else EEPROM_write(3,0);
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	f4 da       	rcall	.-2584   	; 0x334 <EEPROM_write>
			break;
		}
	}
	I2C_StopCondition();
     d4c:	0a d0       	rcall	.+20     	; 0xd62 <I2C_StopCondition>
     d4e:	08 95       	ret

00000d50 <I2C_Init>:
{
	I2C_StartCondition(); // Отправим условие START
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
	I2C_SendByte(c);// Отправим байт данных
	I2C_StopCondition();// Отправим условие STOP
}
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	80 b9       	out	0x00, r24	; 0
     d54:	08 95       	ret

00000d56 <I2C_StartCondition>:
     d56:	84 ea       	ldi	r24, 0xA4	; 164
     d58:	86 bf       	out	0x36, r24	; 54
     d5a:	06 b6       	in	r0, 0x36	; 54
     d5c:	07 fe       	sbrs	r0, 7
     d5e:	fd cf       	rjmp	.-6      	; 0xd5a <I2C_StartCondition+0x4>
     d60:	08 95       	ret

00000d62 <I2C_StopCondition>:
     d62:	84 e9       	ldi	r24, 0x94	; 148
     d64:	86 bf       	out	0x36, r24	; 54
     d66:	08 95       	ret

00000d68 <I2C_SendByte>:
     d68:	83 b9       	out	0x03, r24	; 3
     d6a:	84 e8       	ldi	r24, 0x84	; 132
     d6c:	86 bf       	out	0x36, r24	; 54
     d6e:	06 b6       	in	r0, 0x36	; 54
     d70:	07 fe       	sbrs	r0, 7
     d72:	fd cf       	rjmp	.-6      	; 0xd6e <I2C_SendByte+0x6>
     d74:	08 95       	ret

00000d76 <I2C_ReadByte>:
unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     d76:	84 ec       	ldi	r24, 0xC4	; 196
     d78:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
     d7a:	06 b6       	in	r0, 0x36	; 54
     d7c:	07 fe       	sbrs	r0, 7
     d7e:	fd cf       	rjmp	.-6      	; 0xd7a <I2C_ReadByte+0x4>
	return TWDR;//читаем регистр данных
     d80:	83 b1       	in	r24, 0x03	; 3
}
     d82:	08 95       	ret

00000d84 <I2C_ReadLastByte>:
unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
     d84:	84 e8       	ldi	r24, 0x84	; 132
     d86:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
     d88:	06 b6       	in	r0, 0x36	; 54
     d8a:	07 fe       	sbrs	r0, 7
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <I2C_ReadLastByte+0x4>
	return TWDR;//читаем регистр данных
     d8e:	83 b1       	in	r24, 0x03	; 3
     d90:	08 95       	ret

00000d92 <send_0>:
		col /=2;
		bin += reminder*n;
		n *= 10;
	}
	return bin;
}
     d92:	88 b3       	in	r24, 0x18	; 24
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	88 bb       	out	0x18, r24	; 24
     d98:	00 00       	nop
     d9a:	00 00       	nop
     d9c:	88 b3       	in	r24, 0x18	; 24
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	88 bb       	out	0x18, r24	; 24
	...
     daa:	08 95       	ret

00000dac <send_1>:
     dac:	88 b3       	in	r24, 0x18	; 24
     dae:	88 60       	ori	r24, 0x08	; 8
     db0:	88 bb       	out	0x18, r24	; 24
	...
     dba:	00 00       	nop
     dbc:	88 b3       	in	r24, 0x18	; 24
     dbe:	87 7f       	andi	r24, 0xF7	; 247
     dc0:	88 bb       	out	0x18, r24	; 24
     dc2:	00 00       	nop
     dc4:	08 95       	ret

00000dc6 <send_byte_to_1LED>:
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	60 97       	sbiw	r28, 0x10	; 16
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <send_byte_to_1LED+0x42>
     de4:	ac 01       	movw	r20, r24
     de6:	41 70       	andi	r20, 0x01	; 1
     de8:	55 27       	eor	r21, r21
     dea:	f9 01       	movw	r30, r18
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	6c 0f       	add	r22, r28
     df6:	7d 1f       	adc	r23, r29
     df8:	e6 0f       	add	r30, r22
     dfa:	f7 1f       	adc	r31, r23
     dfc:	51 83       	std	Z+1, r21	; 0x01
     dfe:	40 83       	st	Z, r20
     e00:	95 95       	asr	r25
     e02:	87 95       	ror	r24
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	28 30       	cpi	r18, 0x08	; 8
     e0a:	31 05       	cpc	r19, r1
     e0c:	5c f3       	brlt	.-42     	; 0xde4 <send_byte_to_1LED+0x1e>
     e0e:	07 e0       	ldi	r16, 0x07	; 7
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <send_byte_to_1LED+0x76>
     e14:	f8 01       	movw	r30, r16
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	8c 0f       	add	r24, r28
     e20:	9d 1f       	adc	r25, r29
     e22:	e8 0f       	add	r30, r24
     e24:	f9 1f       	adc	r31, r25
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	21 f0       	breq	.+8      	; 0xe36 <send_byte_to_1LED+0x70>
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	19 f4       	brne	.+6      	; 0xe38 <send_byte_to_1LED+0x72>
     e32:	bc df       	rcall	.-136    	; 0xdac <send_1>
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <send_byte_to_1LED+0x72>
     e36:	ad df       	rcall	.-166    	; 0xd92 <send_0>
     e38:	01 50       	subi	r16, 0x01	; 1
     e3a:	11 09       	sbc	r17, r1
     e3c:	11 23       	and	r17, r17
     e3e:	54 f7       	brge	.-44     	; 0xe14 <send_byte_to_1LED+0x4e>
     e40:	60 96       	adiw	r28, 0x10	; 16
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <send_color_to_1LED>:
void send_color_to_1LED(int mode, int m) //r g b от 0 до 255
{
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
	int green, red, blue;
	//green = convert_from_dec_to_bin(green);
	//red = convert_from_dec_to_bin(red);
	//blue = convert_from_dec_to_bin(blue);
    switch(mode)
     e66:	8e 30       	cpi	r24, 0x0E	; 14
     e68:	91 05       	cpc	r25, r1
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <send_color_to_1LED+0x18>
     e6c:	ec c0       	rjmp	.+472    	; 0x1046 <send_color_to_1LED+0x1f0>
     e6e:	fc 01       	movw	r30, r24
     e70:	e5 5e       	subi	r30, 0xE5	; 229
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	09 94       	ijmp
	{
		case 0:{ green = 0; red = 0; blue = 0; break;}
		case 1:{ green = (float)(255*BRIGHTNESS); red = 0; blue = 0; break;}
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	4f e7       	ldi	r20, 0x7F	; 127
     e7c:	53 e4       	ldi	r21, 0x43	; 67
     e7e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <BRIGHTNESS>
     e82:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     e86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     e8a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     e8e:	2e d5       	rcall	.+2652   	; 0x18ec <__mulsf3>
     e90:	d3 d4       	rcall	.+2470   	; 0x1838 <__fixsfsi>
     e92:	8b 01       	movw	r16, r22
     e94:	e1 2c       	mov	r14, r1
     e96:	f1 2c       	mov	r15, r1
     e98:	c0 e0       	ldi	r28, 0x00	; 0
     e9a:	d0 e0       	ldi	r29, 0x00	; 0
     e9c:	d4 c0       	rjmp	.+424    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 2:{ green = 0; red = (float)(255*BRIGHTNESS); blue = 0; break;}
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	4f e7       	ldi	r20, 0x7F	; 127
     ea4:	53 e4       	ldi	r21, 0x43	; 67
     ea6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <BRIGHTNESS>
     eaa:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     eae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     eb2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     eb6:	1a d5       	rcall	.+2612   	; 0x18ec <__mulsf3>
     eb8:	bf d4       	rcall	.+2430   	; 0x1838 <__fixsfsi>
     eba:	eb 01       	movw	r28, r22
     ebc:	e1 2c       	mov	r14, r1
     ebe:	f1 2c       	mov	r15, r1
     ec0:	00 e0       	ldi	r16, 0x00	; 0
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	c0 c0       	rjmp	.+384    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 3:{ green = 0; red = 0; blue = (float)(255*BRIGHTNESS); break;}
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	53 e4       	ldi	r21, 0x43	; 67
     ece:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <BRIGHTNESS>
     ed2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     ed6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     eda:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     ede:	06 d5       	rcall	.+2572   	; 0x18ec <__mulsf3>
     ee0:	ab d4       	rcall	.+2390   	; 0x1838 <__fixsfsi>
     ee2:	7b 01       	movw	r14, r22
     ee4:	c0 e0       	ldi	r28, 0x00	; 0
     ee6:	d0 e0       	ldi	r29, 0x00	; 0
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	10 e0       	ldi	r17, 0x00	; 0
     eec:	ac c0       	rjmp	.+344    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 4:{ green = (float)(255*BRIGHTNESS); red = (float)(255*BRIGHTNESS); blue = (float)(255*BRIGHTNESS); break;}
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	53 e4       	ldi	r21, 0x43	; 67
     ef6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <BRIGHTNESS>
     efa:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     efe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     f02:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     f06:	f2 d4       	rcall	.+2532   	; 0x18ec <__mulsf3>
     f08:	97 d4       	rcall	.+2350   	; 0x1838 <__fixsfsi>
     f0a:	8b 01       	movw	r16, r22
     f0c:	7b 01       	movw	r14, r22
     f0e:	eb 01       	movw	r28, r22
     f10:	9a c0       	rjmp	.+308    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 5:{ green = (float)(255*BRIGHTNESS); red = (float)(255*BRIGHTNESS); blue = 0; break;}
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	53 e4       	ldi	r21, 0x43	; 67
     f1a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <BRIGHTNESS>
     f1e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     f22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     f26:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     f2a:	e0 d4       	rcall	.+2496   	; 0x18ec <__mulsf3>
     f2c:	85 d4       	rcall	.+2314   	; 0x1838 <__fixsfsi>
     f2e:	8b 01       	movw	r16, r22
     f30:	eb 01       	movw	r28, r22
     f32:	e1 2c       	mov	r14, r1
     f34:	f1 2c       	mov	r15, r1
     f36:	87 c0       	rjmp	.+270    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 6:{ green = 0; red = (float)(165*BRIGHTNESS); blue = (float)(165*BRIGHTNESS); break;}
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	45 e2       	ldi	r20, 0x25	; 37
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <BRIGHTNESS>
     f44:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     f48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     f4c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     f50:	cd d4       	rcall	.+2458   	; 0x18ec <__mulsf3>
     f52:	72 d4       	rcall	.+2276   	; 0x1838 <__fixsfsi>
     f54:	eb 01       	movw	r28, r22
     f56:	7b 01       	movw	r14, r22
     f58:	00 e0       	ldi	r16, 0x00	; 0
     f5a:	10 e0       	ldi	r17, 0x00	; 0
     f5c:	74 c0       	rjmp	.+232    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 7:{ green = (float)(127*BRIGHTNESS); red = (float)(255*BRIGHTNESS); blue = 0; break;}
     f5e:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <BRIGHTNESS>
     f62:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     f66:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     f6a:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4e ef       	ldi	r20, 0xFE	; 254
     f74:	52 e4       	ldi	r21, 0x42	; 66
     f76:	c7 01       	movw	r24, r14
     f78:	b6 01       	movw	r22, r12
     f7a:	b8 d4       	rcall	.+2416   	; 0x18ec <__mulsf3>
     f7c:	5d d4       	rcall	.+2234   	; 0x1838 <__fixsfsi>
     f7e:	8b 01       	movw	r16, r22
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	53 e4       	ldi	r21, 0x43	; 67
     f88:	c7 01       	movw	r24, r14
     f8a:	b6 01       	movw	r22, r12
     f8c:	af d4       	rcall	.+2398   	; 0x18ec <__mulsf3>
     f8e:	54 d4       	rcall	.+2216   	; 0x1838 <__fixsfsi>
     f90:	eb 01       	movw	r28, r22
     f92:	e1 2c       	mov	r14, r1
     f94:	f1 2c       	mov	r15, r1
     f96:	57 c0       	rjmp	.+174    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 8:{ green = (float)(125*BRIGHTNESS); red = 0; blue = (float)(158*BRIGHTNESS); break;}	
     f98:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <BRIGHTNESS>
     f9c:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <BRIGHTNESS+0x1>
     fa0:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <BRIGHTNESS+0x2>
     fa4:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <BRIGHTNESS+0x3>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4a ef       	ldi	r20, 0xFA	; 250
     fae:	52 e4       	ldi	r21, 0x42	; 66
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	9b d4       	rcall	.+2358   	; 0x18ec <__mulsf3>
     fb6:	40 d4       	rcall	.+2176   	; 0x1838 <__fixsfsi>
     fb8:	8b 01       	movw	r16, r22
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	4e e1       	ldi	r20, 0x1E	; 30
     fc0:	53 e4       	ldi	r21, 0x43	; 67
     fc2:	c7 01       	movw	r24, r14
     fc4:	b6 01       	movw	r22, r12
     fc6:	92 d4       	rcall	.+2340   	; 0x18ec <__mulsf3>
     fc8:	37 d4       	rcall	.+2158   	; 0x1838 <__fixsfsi>
     fca:	7b 01       	movw	r14, r22
     fcc:	c0 e0       	ldi	r28, 0x00	; 0
     fce:	d0 e0       	ldi	r29, 0x00	; 0
     fd0:	3a c0       	rjmp	.+116    	; 0x1046 <send_color_to_1LED+0x1f0>
		case 11:{ green = m/2; red = 255/2; blue = 0; break;}// в пол яркости все время для данного режима
     fd2:	8b 01       	movw	r16, r22
     fd4:	77 23       	and	r23, r23
     fd6:	14 f4       	brge	.+4      	; 0xfdc <send_color_to_1LED+0x186>
     fd8:	0f 5f       	subi	r16, 0xFF	; 255
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	15 95       	asr	r17
     fde:	07 95       	ror	r16
     fe0:	e1 2c       	mov	r14, r1
     fe2:	f1 2c       	mov	r15, r1
     fe4:	cf e7       	ldi	r28, 0x7F	; 127
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
     fe8:	2e c0       	rjmp	.+92     	; 0x1046 <send_color_to_1LED+0x1f0>
		case 12:{ green = green_mode12/2; red = red_mode12/2; blue = 70/2; break;}// в пол яркости все время для данного режима
     fea:	00 91 66 00 	lds	r16, 0x0066	; 0x800066 <green_mode12>
     fee:	10 91 67 00 	lds	r17, 0x0067	; 0x800067 <green_mode12+0x1>
     ff2:	11 23       	and	r17, r17
     ff4:	14 f4       	brge	.+4      	; 0xffa <send_color_to_1LED+0x1a4>
     ff6:	0f 5f       	subi	r16, 0xFF	; 255
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	15 95       	asr	r17
     ffc:	07 95       	ror	r16
     ffe:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <red_mode12>
    1002:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <red_mode12+0x1>
    1006:	77 23       	and	r23, r23
    1008:	14 f4       	brge	.+4      	; 0x100e <send_color_to_1LED+0x1b8>
    100a:	6f 5f       	subi	r22, 0xFF	; 255
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	eb 01       	movw	r28, r22
    1010:	d5 95       	asr	r29
    1012:	c7 95       	ror	r28
    1014:	0f 2e       	mov	r0, r31
    1016:	f3 e2       	ldi	r31, 0x23	; 35
    1018:	ef 2e       	mov	r14, r31
    101a:	f1 2c       	mov	r15, r1
    101c:	f0 2d       	mov	r31, r0
    101e:	13 c0       	rjmp	.+38     	; 0x1046 <send_color_to_1LED+0x1f0>
		case 13:{ green = green_mode13; red = red_mode13; blue = blue_mode13; break;}// в пол яркости все время для данного режима
    1020:	00 91 28 02 	lds	r16, 0x0228	; 0x800228 <green_mode13>
    1024:	10 91 29 02 	lds	r17, 0x0229	; 0x800229 <green_mode13+0x1>
    1028:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <red_mode13>
    102c:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <red_mode13+0x1>
    1030:	e0 90 26 02 	lds	r14, 0x0226	; 0x800226 <blue_mode13>
    1034:	f0 90 27 02 	lds	r15, 0x0227	; 0x800227 <blue_mode13+0x1>
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <send_color_to_1LED+0x1f0>
	//green = convert_from_dec_to_bin(green);
	//red = convert_from_dec_to_bin(red);
	//blue = convert_from_dec_to_bin(blue);
    switch(mode)
	{
		case 0:{ green = 0; red = 0; blue = 0; break;}
    103a:	e1 2c       	mov	r14, r1
    103c:	f1 2c       	mov	r15, r1
    103e:	c0 e0       	ldi	r28, 0x00	; 0
    1040:	d0 e0       	ldi	r29, 0x00	; 0
    1042:	00 e0       	ldi	r16, 0x00	; 0
    1044:	10 e0       	ldi	r17, 0x00	; 0
		case 8:{ green = (float)(125*BRIGHTNESS); red = 0; blue = (float)(158*BRIGHTNESS); break;}	
		case 11:{ green = m/2; red = 255/2; blue = 0; break;}// в пол яркости все время для данного режима
		case 12:{ green = green_mode12/2; red = red_mode12/2; blue = 70/2; break;}// в пол яркости все время для данного режима
		case 13:{ green = green_mode13; red = red_mode13; blue = blue_mode13; break;}// в пол яркости все время для данного режима
	}
	send_byte_to_1LED(green);
    1046:	c8 01       	movw	r24, r16
    1048:	be de       	rcall	.-644    	; 0xdc6 <send_byte_to_1LED>
	send_byte_to_1LED(red);
    104a:	ce 01       	movw	r24, r28
    104c:	bc de       	rcall	.-648    	; 0xdc6 <send_byte_to_1LED>
	send_byte_to_1LED(blue);
    104e:	c7 01       	movw	r24, r14
    1050:	ba de       	rcall	.-652    	; 0xdc6 <send_byte_to_1LED>
	PORTB &= ~(1<<(PORTB3));
    1052:	88 b3       	in	r24, 0x18	; 24
    1054:	87 7f       	andi	r24, 0xF7	; 247
    1056:	88 bb       	out	0x18, r24	; 24
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	08 95       	ret

0000106a <turn_on_diap_of_LEDS>:
}
*/
int mode9;
int mode10=1;
void turn_on_diap_of_LEDS(int* massiv, int mode)
{
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	8c 01       	movw	r16, r24
    1074:	eb 01       	movw	r28, r22
	k=0;
    1076:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <k+0x1>
    107a:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <k>
	for(m = 1; m <= 59; m++)
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <m+0x1>
    1086:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <m>
    108a:	bd c0       	rjmp	.+378    	; 0x1206 <turn_on_diap_of_LEDS+0x19c>
	{
		if (m == massiv[k])//горят
    108c:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <k>
    1090:	f0 91 2f 02 	lds	r31, 0x022F	; 0x80022f <k+0x1>
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	e0 0f       	add	r30, r16
    109a:	f1 1f       	adc	r31, r17
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	68 17       	cp	r22, r24
    10a2:	79 07       	cpc	r23, r25
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <turn_on_diap_of_LEDS+0x3e>
    10a6:	a3 c0       	rjmp	.+326    	; 0x11ee <turn_on_diap_of_LEDS+0x184>
		{
			if (mode == DIFFERENT_colours)//режим разноцветных светодиодов
    10a8:	c9 30       	cpi	r28, 0x09	; 9
    10aa:	d1 05       	cpc	r29, r1
    10ac:	b9 f4       	brne	.+46     	; 0x10dc <turn_on_diap_of_LEDS+0x72>
			{
				mode9 += 1;
    10ae:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <mode9>
    10b2:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <mode9+0x1>
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <mode9+0x1>
    10bc:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <mode9>
				if (mode9==9)
    10c0:	09 97       	sbiw	r24, 0x09	; 9
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <turn_on_diap_of_LEDS+0x66>
				{
					mode9=1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <mode9+0x1>
    10cc:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <mode9>
				}
				send_color_to_1LED(mode9, m);//r g b от 0 до 255
    10d0:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <mode9>
    10d4:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <mode9+0x1>
    10d8:	be de       	rcall	.-644    	; 0xe56 <send_color_to_1LED>
    10da:	7f c0       	rjmp	.+254    	; 0x11da <turn_on_diap_of_LEDS+0x170>
			}
			else if (mode == COLOUR_FIGURES)//режим цифр разного цвета
    10dc:	ca 30       	cpi	r28, 0x0A	; 10
    10de:	d1 05       	cpc	r29, r1
    10e0:	a9 f5       	brne	.+106    	; 0x114c <turn_on_diap_of_LEDS+0xe2>
			{
				if ((m>0)&&(m<15))//1ая цифра
    10e2:	cb 01       	movw	r24, r22
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	0e 97       	sbiw	r24, 0x0e	; 14
    10e8:	18 f4       	brcc	.+6      	; 0x10f0 <turn_on_diap_of_LEDS+0x86>
				{
					send_color_to_1LED(1, m);
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	b3 de       	rcall	.-666    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>14)&&(m<29))//2ая цифра
    10f0:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <m>
    10f4:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <m+0x1>
    10f8:	cb 01       	movw	r24, r22
    10fa:	0f 97       	sbiw	r24, 0x0f	; 15
    10fc:	0e 97       	sbiw	r24, 0x0e	; 14
    10fe:	18 f4       	brcc	.+6      	; 0x1106 <turn_on_diap_of_LEDS+0x9c>
				{
					send_color_to_1LED(5, m);
    1100:	85 e0       	ldi	r24, 0x05	; 5
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a8 de       	rcall	.-688    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>28)&&(m<32))//точки
    1106:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <m>
    110a:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <m+0x1>
    110e:	cb 01       	movw	r24, r22
    1110:	4d 97       	sbiw	r24, 0x1d	; 29
    1112:	03 97       	sbiw	r24, 0x03	; 3
    1114:	18 f4       	brcc	.+6      	; 0x111c <turn_on_diap_of_LEDS+0xb2>
				{
					send_color_to_1LED(2, m);
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9d de       	rcall	.-710    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>31)&&(m<46))//3я цифра
    111c:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <m>
    1120:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <m+0x1>
    1124:	cb 01       	movw	r24, r22
    1126:	80 97       	sbiw	r24, 0x20	; 32
    1128:	0e 97       	sbiw	r24, 0x0e	; 14
    112a:	18 f4       	brcc	.+6      	; 0x1132 <turn_on_diap_of_LEDS+0xc8>
				{
					send_color_to_1LED(3, m);
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	92 de       	rcall	.-732    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>45)&&(m<60))//4ая цифра
    1132:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <m>
    1136:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <m+0x1>
    113a:	cb 01       	movw	r24, r22
    113c:	8e 97       	sbiw	r24, 0x2e	; 46
    113e:	0e 97       	sbiw	r24, 0x0e	; 14
    1140:	08 f0       	brcs	.+2      	; 0x1144 <turn_on_diap_of_LEDS+0xda>
    1142:	4b c0       	rjmp	.+150    	; 0x11da <turn_on_diap_of_LEDS+0x170>
				{
					send_color_to_1LED(6, m);
    1144:	86 e0       	ldi	r24, 0x06	; 6
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	86 de       	rcall	.-756    	; 0xe56 <send_color_to_1LED>
    114a:	47 c0       	rjmp	.+142    	; 0x11da <turn_on_diap_of_LEDS+0x170>
				}		
			}
			else if ((mode == MODE11)||(mode == MODE12)||(mode == RADUGA))
    114c:	ce 01       	movw	r24, r28
    114e:	0b 97       	sbiw	r24, 0x0b	; 11
    1150:	03 97       	sbiw	r24, 0x03	; 3
    1152:	08 f0       	brcs	.+2      	; 0x1156 <turn_on_diap_of_LEDS+0xec>
    1154:	40 c0       	rjmp	.+128    	; 0x11d6 <turn_on_diap_of_LEDS+0x16c>
			{
				if ((m>0)&&(m<15))//1ая цифра
    1156:	61 50       	subi	r22, 0x01	; 1
    1158:	71 09       	sbc	r23, r1
    115a:	6e 30       	cpi	r22, 0x0E	; 14
    115c:	71 05       	cpc	r23, r1
    115e:	30 f4       	brcc	.+12     	; 0x116c <turn_on_diap_of_LEDS+0x102>
				{
					send_color_to_1LED(mode, counter_of_leds);
    1160:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <counter_of_leds>
    1164:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <counter_of_leds+0x1>
    1168:	ce 01       	movw	r24, r28
    116a:	75 de       	rcall	.-790    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>14)&&(m<29))//2ая цифра
    116c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <m>
    1170:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <m+0x1>
    1174:	0f 97       	sbiw	r24, 0x0f	; 15
    1176:	0e 97       	sbiw	r24, 0x0e	; 14
    1178:	30 f4       	brcc	.+12     	; 0x1186 <turn_on_diap_of_LEDS+0x11c>
				{
					send_color_to_1LED(mode, counter_of_leds);
    117a:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <counter_of_leds>
    117e:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <counter_of_leds+0x1>
    1182:	ce 01       	movw	r24, r28
    1184:	68 de       	rcall	.-816    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>28)&&(m<32))//точки
    1186:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <m>
    118a:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <m+0x1>
    118e:	4d 97       	sbiw	r24, 0x1d	; 29
    1190:	03 97       	sbiw	r24, 0x03	; 3
    1192:	30 f4       	brcc	.+12     	; 0x11a0 <turn_on_diap_of_LEDS+0x136>
				{
					send_color_to_1LED(mode, counter_of_leds);
    1194:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <counter_of_leds>
    1198:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <counter_of_leds+0x1>
    119c:	ce 01       	movw	r24, r28
    119e:	5b de       	rcall	.-842    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>31)&&(m<46))//3я цифра
    11a0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <m>
    11a4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <m+0x1>
    11a8:	80 97       	sbiw	r24, 0x20	; 32
    11aa:	0e 97       	sbiw	r24, 0x0e	; 14
    11ac:	30 f4       	brcc	.+12     	; 0x11ba <turn_on_diap_of_LEDS+0x150>
				{
					send_color_to_1LED(mode, counter_of_leds);
    11ae:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <counter_of_leds>
    11b2:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <counter_of_leds+0x1>
    11b6:	ce 01       	movw	r24, r28
    11b8:	4e de       	rcall	.-868    	; 0xe56 <send_color_to_1LED>
				}
				if ((m>45)&&(m<60))//4ая цифра
    11ba:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <m>
    11be:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <m+0x1>
    11c2:	8e 97       	sbiw	r24, 0x2e	; 46
    11c4:	0e 97       	sbiw	r24, 0x0e	; 14
    11c6:	48 f4       	brcc	.+18     	; 0x11da <turn_on_diap_of_LEDS+0x170>
				{
					send_color_to_1LED(mode, counter_of_leds);
    11c8:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <counter_of_leds>
    11cc:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <counter_of_leds+0x1>
    11d0:	ce 01       	movw	r24, r28
    11d2:	41 de       	rcall	.-894    	; 0xe56 <send_color_to_1LED>
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <turn_on_diap_of_LEDS+0x170>
				}
			}
			else//режим одного цвета
			{
			    send_color_to_1LED(mode, m);//r g b от 0 до 255
    11d6:	ce 01       	movw	r24, r28
    11d8:	3e de       	rcall	.-900    	; 0xe56 <send_color_to_1LED>
			}
			k++;
    11da:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <k>
    11de:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <k+0x1>
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <k+0x1>
    11e8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <k>
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <turn_on_diap_of_LEDS+0x18a>
		}
		else//не горят
		{
			send_color_to_1LED(NONE, m);//r g b от 0 до 255
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	31 de       	rcall	.-926    	; 0xe56 <send_color_to_1LED>
int mode9;
int mode10=1;
void turn_on_diap_of_LEDS(int* massiv, int mode)
{
	k=0;
	for(m = 1; m <= 59; m++)
    11f4:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <m>
    11f8:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <m+0x1>
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <m+0x1>
    1202:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <m>
    1206:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <m>
    120a:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <m+0x1>
    120e:	6c 33       	cpi	r22, 0x3C	; 60
    1210:	71 05       	cpc	r23, r1
    1212:	0c f4       	brge	.+2      	; 0x1216 <turn_on_diap_of_LEDS+0x1ac>
    1214:	3b cf       	rjmp	.-394    	; 0x108c <turn_on_diap_of_LEDS+0x22>
		else//не горят
		{
			send_color_to_1LED(NONE, m);//r g b от 0 до 255
		}
	}
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	08 95       	ret

00001220 <convert_massiv>:
	for(i=0;i<distance;i++)
	{
		array[i+distance] = array[i];
		array[i]=0;
	}
}
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	0d c0       	rjmp	.+26     	; 0x1240 <convert_massiv+0x20>
    1226:	f9 01       	movw	r30, r18
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	e8 0f       	add	r30, r24
    122e:	f9 1f       	adc	r31, r25
    1230:	a0 81       	ld	r26, Z
    1232:	b1 81       	ldd	r27, Z+1	; 0x01
    1234:	a6 1b       	sub	r26, r22
    1236:	b7 0b       	sbc	r27, r23
    1238:	b1 83       	std	Z+1, r27	; 0x01
    123a:	a0 83       	st	Z, r26
    123c:	2f 5f       	subi	r18, 0xFF	; 255
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	24 17       	cp	r18, r20
    1242:	35 07       	cpc	r19, r21
    1244:	84 f3       	brlt	.-32     	; 0x1226 <convert_massiv+0x6>
    1246:	08 95       	ret

00001248 <recover_massiv>:
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <recover_massiv+0x20>
    124e:	f9 01       	movw	r30, r18
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	a0 81       	ld	r26, Z
    125a:	b1 81       	ldd	r27, Z+1	; 0x01
    125c:	a6 0f       	add	r26, r22
    125e:	b7 1f       	adc	r27, r23
    1260:	b1 83       	std	Z+1, r27	; 0x01
    1262:	a0 83       	st	Z, r26
    1264:	2f 5f       	subi	r18, 0xFF	; 255
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	24 17       	cp	r18, r20
    126a:	35 07       	cpc	r19, r21
    126c:	84 f3       	brlt	.-32     	; 0x124e <recover_massiv+0x6>
    126e:	08 95       	ret

00001270 <chose_massivR1>:
    1270:	8a 30       	cpi	r24, 0x0A	; 10
    1272:	91 05       	cpc	r25, r1
    1274:	e0 f4       	brcc	.+56     	; 0x12ae <chose_massivR1+0x3e>
    1276:	fc 01       	movw	r30, r24
    1278:	e7 5d       	subi	r30, 0xD7	; 215
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	09 94       	ijmp
    127e:	20 ee       	ldi	r18, 0xE0	; 224
    1280:	31 e0       	ldi	r19, 0x01	; 1
    1282:	1b c0       	rjmp	.+54     	; 0x12ba <chose_massivR1+0x4a>
    1284:	2c ec       	ldi	r18, 0xCC	; 204
    1286:	31 e0       	ldi	r19, 0x01	; 1
    1288:	18 c0       	rjmp	.+48     	; 0x12ba <chose_massivR1+0x4a>
    128a:	2c eb       	ldi	r18, 0xBC	; 188
    128c:	31 e0       	ldi	r19, 0x01	; 1
    128e:	15 c0       	rjmp	.+42     	; 0x12ba <chose_massivR1+0x4a>
    1290:	28 ea       	ldi	r18, 0xA8	; 168
    1292:	31 e0       	ldi	r19, 0x01	; 1
    1294:	12 c0       	rjmp	.+36     	; 0x12ba <chose_massivR1+0x4a>
    1296:	20 e9       	ldi	r18, 0x90	; 144
    1298:	31 e0       	ldi	r19, 0x01	; 1
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <chose_massivR1+0x4a>
    129c:	24 e8       	ldi	r18, 0x84	; 132
    129e:	31 e0       	ldi	r19, 0x01	; 1
    12a0:	0c c0       	rjmp	.+24     	; 0x12ba <chose_massivR1+0x4a>
    12a2:	28 e6       	ldi	r18, 0x68	; 104
    12a4:	31 e0       	ldi	r19, 0x01	; 1
    12a6:	09 c0       	rjmp	.+18     	; 0x12ba <chose_massivR1+0x4a>
    12a8:	20 e5       	ldi	r18, 0x50	; 80
    12aa:	31 e0       	ldi	r19, 0x01	; 1
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <chose_massivR1+0x4a>
    12ae:	08 95       	ret
    12b0:	2c ef       	ldi	r18, 0xFC	; 252
    12b2:	31 e0       	ldi	r19, 0x01	; 1
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <chose_massivR1+0x4a>
    12b6:	24 ef       	ldi	r18, 0xF4	; 244
    12b8:	31 e0       	ldi	r19, 0x01	; 1
    12ba:	82 2f       	mov	r24, r18
    12bc:	93 2f       	mov	r25, r19
    12be:	08 95       	ret

000012c0 <chose_massivR2>:
    12c0:	8a 30       	cpi	r24, 0x0A	; 10
    12c2:	91 05       	cpc	r25, r1
    12c4:	e0 f4       	brcc	.+56     	; 0x12fe <chose_massivR2+0x3e>
    12c6:	fc 01       	movw	r30, r24
    12c8:	ed 5c       	subi	r30, 0xCD	; 205
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	09 94       	ijmp
    12ce:	2c e1       	ldi	r18, 0x1C	; 28
    12d0:	31 e0       	ldi	r19, 0x01	; 1
    12d2:	1b c0       	rjmp	.+54     	; 0x130a <chose_massivR2+0x4a>
    12d4:	28 e0       	ldi	r18, 0x08	; 8
    12d6:	31 e0       	ldi	r19, 0x01	; 1
    12d8:	18 c0       	rjmp	.+48     	; 0x130a <chose_massivR2+0x4a>
    12da:	28 ef       	ldi	r18, 0xF8	; 248
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	15 c0       	rjmp	.+42     	; 0x130a <chose_massivR2+0x4a>
    12e0:	24 ee       	ldi	r18, 0xE4	; 228
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	12 c0       	rjmp	.+36     	; 0x130a <chose_massivR2+0x4a>
    12e6:	2c ec       	ldi	r18, 0xCC	; 204
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <chose_massivR2+0x4a>
    12ec:	20 ec       	ldi	r18, 0xC0	; 192
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	0c c0       	rjmp	.+24     	; 0x130a <chose_massivR2+0x4a>
    12f2:	24 ea       	ldi	r18, 0xA4	; 164
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <chose_massivR2+0x4a>
    12f8:	2c e8       	ldi	r18, 0x8C	; 140
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <chose_massivR2+0x4a>
    12fe:	08 95       	ret
    1300:	28 e3       	ldi	r18, 0x38	; 56
    1302:	31 e0       	ldi	r19, 0x01	; 1
    1304:	02 c0       	rjmp	.+4      	; 0x130a <chose_massivR2+0x4a>
    1306:	20 e3       	ldi	r18, 0x30	; 48
    1308:	31 e0       	ldi	r19, 0x01	; 1
    130a:	82 2f       	mov	r24, r18
    130c:	93 2f       	mov	r25, r19
    130e:	08 95       	ret

00001310 <chose_size>:
int chose_size(int R)
{
	switch(R)
    1310:	8a 30       	cpi	r24, 0x0A	; 10
    1312:	91 05       	cpc	r25, r1
    1314:	b0 f4       	brcc	.+44     	; 0x1342 <chose_size+0x32>
    1316:	fc 01       	movw	r30, r24
    1318:	e3 5c       	subi	r30, 0xC3	; 195
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	09 94       	ijmp
	{
		case 0: return 12; break;
		case 1: return 4; break;
		case 2: return 10; break;
    131e:	8a e0       	ldi	r24, 0x0A	; 10
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	08 95       	ret
		case 3: return 10; break;
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	08 95       	ret
		case 4: return 8; break;
    132a:	88 e0       	ldi	r24, 0x08	; 8
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	08 95       	ret
		case 5: return 10; break;
    1330:	8a e0       	ldi	r24, 0x0A	; 10
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	08 95       	ret
		case 6: return 12; break;
		case 7: return 6; break;
    1336:	86 e0       	ldi	r24, 0x06	; 6
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	08 95       	ret
		case 8: return 14; break;
    133c:	8e e0       	ldi	r24, 0x0E	; 14
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	08 95       	ret
		case 9: return 12; break;
	}
}	
    1342:	08 95       	ret
}
int chose_size(int R)
{
	switch(R)
	{
		case 0: return 12; break;
    1344:	8c e0       	ldi	r24, 0x0C	; 12
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	08 95       	ret
		case 1: return 4; break;
    134a:	84 e0       	ldi	r24, 0x04	; 4
    134c:	90 e0       	ldi	r25, 0x00	; 0
		case 6: return 12; break;
		case 7: return 6; break;
		case 8: return 14; break;
		case 9: return 12; break;
	}
}	
    134e:	08 95       	ret

00001350 <print_all_number>:
void print_all_number(int number, int mode)
{
    1350:	2f 92       	push	r2
    1352:	3f 92       	push	r3
    1354:	4f 92       	push	r4
    1356:	5f 92       	push	r5
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	c7 57       	subi	r28, 0x77	; 119
    137a:	d1 09       	sbc	r29, r1
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	9c 01       	movw	r18, r24
    1388:	1b 01       	movw	r2, r22
	int* mas3;
	int k,r;
	int sizeR3,sizeR4,sizeR1,sizeR2;
	int R1=0, R2=0, R3=0, R4=0;
	
	R1 = number%10;
    138a:	ea e0       	ldi	r30, 0x0A	; 10
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	bf 01       	movw	r22, r30
    1390:	38 d3       	rcall	.+1648   	; 0x1a02 <__divmodhi4>
    1392:	2c 01       	movw	r4, r24
	R2 = (number/10)%10;
    1394:	cb 01       	movw	r24, r22
    1396:	bf 01       	movw	r22, r30
    1398:	34 d3       	rcall	.+1640   	; 0x1a02 <__divmodhi4>
    139a:	6c 01       	movw	r12, r24
	R3 = (number/100)%10;
    139c:	c9 01       	movw	r24, r18
    139e:	64 e6       	ldi	r22, 0x64	; 100
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	2f d3       	rcall	.+1630   	; 0x1a02 <__divmodhi4>
    13a4:	cb 01       	movw	r24, r22
    13a6:	bf 01       	movw	r22, r30
    13a8:	2c d3       	rcall	.+1624   	; 0x1a02 <__divmodhi4>
    13aa:	5c 01       	movw	r10, r24
	R4 = number/1000;
    13ac:	c9 01       	movw	r24, r18
    13ae:	68 ee       	ldi	r22, 0xE8	; 232
    13b0:	73 e0       	ldi	r23, 0x03	; 3
    13b2:	27 d3       	rcall	.+1614   	; 0x1a02 <__divmodhi4>
    13b4:	8b 01       	movw	r16, r22
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R4
	mas0 = convert_massiv(chose_massivR2(R4),31,chose_size(R4));//записываем в конечный массив старший разряд R4 через разницу от R2
    13b6:	cb 01       	movw	r24, r22
    13b8:	ab df       	rcall	.-170    	; 0x1310 <chose_size>
    13ba:	7c 01       	movw	r14, r24
    13bc:	c8 01       	movw	r24, r16
    13be:	80 df       	rcall	.-256    	; 0x12c0 <chose_massivR2>
    13c0:	4c 01       	movw	r8, r24
    13c2:	a7 01       	movw	r20, r14
    13c4:	6f e1       	ldi	r22, 0x1F	; 31
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	2b df       	rcall	.-426    	; 0x1220 <convert_massiv>
	k=0;
	if ( ((clock_change_mode == MODE_CHANGE_HOURS)||(clock_change_mode == MODE_CHANGE_ALARM_HOURS)||(clock_change_mode == MODE_CHANGE_DATE)||(clock_change_mode == MODE_CHANGE_YEAR)) && (timer1_count == 0))
    13ca:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <clock_change_mode>
    13ce:	21 30       	cpi	r18, 0x01	; 1
    13d0:	31 f0       	breq	.+12     	; 0x13de <print_all_number+0x8e>
    13d2:	27 30       	cpi	r18, 0x07	; 7
    13d4:	21 f0       	breq	.+8      	; 0x13de <print_all_number+0x8e>
    13d6:	23 30       	cpi	r18, 0x03	; 3
    13d8:	11 f0       	breq	.+4      	; 0x13de <print_all_number+0x8e>
    13da:	25 30       	cpi	r18, 0x05	; 5
    13dc:	31 f4       	brne	.+12     	; 0x13ea <print_all_number+0x9a>
    13de:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <timer1_count>
    13e2:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <timer1_count+0x1>
    13e6:	23 2b       	or	r18, r19
    13e8:	39 f1       	breq	.+78     	; 0x1438 <print_all_number+0xe8>
	{
		sizeR4 = 0;
	}
	else
	{
	 if (clockmode == CLOCKMODE_WEAKDAY)
    13ea:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <clockmode>
    13ee:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <clockmode+0x1>
    13f2:	23 30       	cpi	r18, 0x03	; 3
    13f4:	31 05       	cpc	r19, r1
    13f6:	19 f1       	breq	.+70     	; 0x143e <print_all_number+0xee>
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	16 c0       	rjmp	.+44     	; 0x142e <print_all_number+0xde>
	 else
	 {
	  sizeR4 = chose_size(R4);
      for (i=0;i<sizeR4;i++)
      {
	  mas_of_leds[i] = mas0[k];
    1402:	fa 01       	movw	r30, r20
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	e8 0f       	add	r30, r24
    140a:	f9 1f       	adc	r31, r25
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	f9 01       	movw	r30, r18
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	a1 e0       	ldi	r26, 0x01	; 1
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ac 0f       	add	r26, r28
    141c:	bd 1f       	adc	r27, r29
    141e:	ea 0f       	add	r30, r26
    1420:	fb 1f       	adc	r31, r27
    1422:	71 83       	std	Z+1, r23	; 0x01
    1424:	60 83       	st	Z, r22
	  k++;
    1426:	4f 5f       	subi	r20, 0xFF	; 255
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
	  sizeR4 = 0;
	 }
	 else
	 {
	  sizeR4 = chose_size(R4);
      for (i=0;i<sizeR4;i++)
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	2e 15       	cp	r18, r14
    1430:	3f 05       	cpc	r19, r15
    1432:	3c f3       	brlt	.-50     	; 0x1402 <print_all_number+0xb2>
	 {
	  sizeR4 = 0;
	 }
	 else
	 {
	  sizeR4 = chose_size(R4);
    1434:	87 01       	movw	r16, r14
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <print_all_number+0xf2>
//вывод разряда	R4
	mas0 = convert_massiv(chose_massivR2(R4),31,chose_size(R4));//записываем в конечный массив старший разряд R4 через разницу от R2
	k=0;
	if ( ((clock_change_mode == MODE_CHANGE_HOURS)||(clock_change_mode == MODE_CHANGE_ALARM_HOURS)||(clock_change_mode == MODE_CHANGE_DATE)||(clock_change_mode == MODE_CHANGE_YEAR)) && (timer1_count == 0))
	{
		sizeR4 = 0;
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <print_all_number+0xf2>
	}
	else
	{
	 if (clockmode == CLOCKMODE_WEAKDAY)
	 {
	  sizeR4 = 0;
    143e:	00 e0       	ldi	r16, 0x00	; 0
    1440:	10 e0       	ldi	r17, 0x00	; 0
	  mas_of_leds[i] = mas0[k];
	  k++;
      }
	 }
	}
	recover_massiv(chose_massivR2(R4),31,chose_size(R4));
    1442:	a7 01       	movw	r20, r14
    1444:	6f e1       	ldi	r22, 0x1F	; 31
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	c4 01       	movw	r24, r8
    144a:	fe de       	rcall	.-516    	; 0x1248 <recover_massiv>
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R3	
    k=0;
	mas1 = convert_massiv(chose_massivR1(R3),31,chose_size(R3));
    144c:	c5 01       	movw	r24, r10
    144e:	60 df       	rcall	.-320    	; 0x1310 <chose_size>
    1450:	7c 01       	movw	r14, r24
    1452:	c5 01       	movw	r24, r10
    1454:	0d df       	rcall	.-486    	; 0x1270 <chose_massivR1>
    1456:	5c 01       	movw	r10, r24
    1458:	a7 01       	movw	r20, r14
    145a:	6f e1       	ldi	r22, 0x1F	; 31
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	e0 de       	rcall	.-576    	; 0x1220 <convert_massiv>
	if ( ((clock_change_mode == MODE_CHANGE_HOURS)||(clock_change_mode == MODE_CHANGE_ALARM_HOURS)||(clock_change_mode == MODE_CHANGE_DATE)||(clock_change_mode == MODE_CHANGE_YEAR)||(clock_change_mode == MODE_CHANGE_WEAKDAY)) && (timer1_count == 0))
    1460:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <clock_change_mode>
    1464:	21 30       	cpi	r18, 0x01	; 1
    1466:	41 f0       	breq	.+16     	; 0x1478 <print_all_number+0x128>
    1468:	27 30       	cpi	r18, 0x07	; 7
    146a:	31 f0       	breq	.+12     	; 0x1478 <print_all_number+0x128>
    146c:	23 30       	cpi	r18, 0x03	; 3
    146e:	21 f0       	breq	.+8      	; 0x1478 <print_all_number+0x128>
    1470:	25 30       	cpi	r18, 0x05	; 5
    1472:	11 f0       	breq	.+4      	; 0x1478 <print_all_number+0x128>
    1474:	26 30       	cpi	r18, 0x06	; 6
    1476:	39 f4       	brne	.+14     	; 0x1486 <print_all_number+0x136>
    1478:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <timer1_count>
    147c:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <timer1_count+0x1>
    1480:	23 2b       	or	r18, r19
    1482:	09 f4       	brne	.+2      	; 0x1486 <print_all_number+0x136>
    1484:	4e c0       	rjmp	.+156    	; 0x1522 <print_all_number+0x1d2>
	{
		sizeR3 = 0;
	}
	else
	{
	 if (clockmode == CLOCKMODE_WEAKDAY)
    1486:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <clockmode>
    148a:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <clockmode+0x1>
    148e:	23 30       	cpi	r18, 0x03	; 3
    1490:	31 05       	cpc	r19, r1
    1492:	d9 f0       	breq	.+54     	; 0x14ca <print_all_number+0x17a>
    1494:	98 01       	movw	r18, r16
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	3b c0       	rjmp	.+118    	; 0x1512 <print_all_number+0x1c2>
	 {
	   sizeR3 = 2;	
	   for (i=sizeR4;i<sizeR4+sizeR3;i++)
	    {
		 mas_of_leds[i] = massiv_1st_tire[k];
    149c:	f9 01       	movw	r30, r18
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e0 59       	subi	r30, 0x90	; 144
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	40 81       	ld	r20, Z
    14a8:	51 81       	ldd	r21, Z+1	; 0x01
    14aa:	fc 01       	movw	r30, r24
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	88 24       	eor	r8, r8
    14b2:	83 94       	inc	r8
    14b4:	91 2c       	mov	r9, r1
    14b6:	8c 0e       	add	r8, r28
    14b8:	9d 1e       	adc	r9, r29
    14ba:	e8 0d       	add	r30, r8
    14bc:	f9 1d       	adc	r31, r9
    14be:	51 83       	std	Z+1, r21	; 0x01
    14c0:	40 83       	st	Z, r20
		 k++;
    14c2:	2f 5f       	subi	r18, 0xFF	; 255
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
	else
	{
	 if (clockmode == CLOCKMODE_WEAKDAY)
	 {
	   sizeR3 = 2;	
	   for (i=sizeR4;i<sizeR4+sizeR3;i++)
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <print_all_number+0x180>
    14ca:	c8 01       	movw	r24, r16
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	a8 01       	movw	r20, r16
    14d2:	4e 5f       	subi	r20, 0xFE	; 254
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	84 17       	cp	r24, r20
    14d8:	95 07       	cpc	r25, r21
    14da:	04 f3       	brlt	.-64     	; 0x149c <print_all_number+0x14c>
	}
	else
	{
	 if (clockmode == CLOCKMODE_WEAKDAY)
	 {
	   sizeR3 = 2;	
    14dc:	68 94       	set
    14de:	66 24       	eor	r6, r6
    14e0:	61 f8       	bld	r6, 1
    14e2:	71 2c       	mov	r7, r1
    14e4:	20 c0       	rjmp	.+64     	; 0x1526 <print_all_number+0x1d6>
	 else
	 {
	  sizeR3 = chose_size(R3);
	  for (i=sizeR4;i<sizeR4+sizeR3;i++)
	  {
	 	 mas_of_leds[i] = mas1[k];
    14e6:	fa 01       	movw	r30, r20
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	e8 0f       	add	r30, r24
    14ee:	f9 1f       	adc	r31, r25
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	f9 01       	movw	r30, r18
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	a1 e0       	ldi	r26, 0x01	; 1
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ac 0f       	add	r26, r28
    1500:	bd 1f       	adc	r27, r29
    1502:	ea 0f       	add	r30, r26
    1504:	fb 1f       	adc	r31, r27
    1506:	71 83       	std	Z+1, r23	; 0x01
    1508:	60 83       	st	Z, r22
		 k++;
    150a:	4f 5f       	subi	r20, 0xFF	; 255
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
	    }
	 }
	 else
	 {
	  sizeR3 = chose_size(R3);
	  for (i=sizeR4;i<sizeR4+sizeR3;i++)
    150e:	2f 5f       	subi	r18, 0xFF	; 255
    1510:	3f 4f       	sbci	r19, 0xFF	; 255
    1512:	b8 01       	movw	r22, r16
    1514:	6e 0d       	add	r22, r14
    1516:	7f 1d       	adc	r23, r15
    1518:	26 17       	cp	r18, r22
    151a:	37 07       	cpc	r19, r23
    151c:	24 f3       	brlt	.-56     	; 0x14e6 <print_all_number+0x196>
		 k++;
	    }
	 }
	 else
	 {
	  sizeR3 = chose_size(R3);
    151e:	37 01       	movw	r6, r14
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <print_all_number+0x1d6>
//вывод разряда	R3	
    k=0;
	mas1 = convert_massiv(chose_massivR1(R3),31,chose_size(R3));
	if ( ((clock_change_mode == MODE_CHANGE_HOURS)||(clock_change_mode == MODE_CHANGE_ALARM_HOURS)||(clock_change_mode == MODE_CHANGE_DATE)||(clock_change_mode == MODE_CHANGE_YEAR)||(clock_change_mode == MODE_CHANGE_WEAKDAY)) && (timer1_count == 0))
	{
		sizeR3 = 0;
    1522:	61 2c       	mov	r6, r1
    1524:	71 2c       	mov	r7, r1
	 	 mas_of_leds[i] = mas1[k];
		 k++;
	  }
	 }
	}
	recover_massiv(chose_massivR1(R3),31,chose_size(R3));
    1526:	a7 01       	movw	r20, r14
    1528:	6f e1       	ldi	r22, 0x1F	; 31
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	c5 01       	movw	r24, r10
    152e:	8c de       	rcall	.-744    	; 0x1248 <recover_massiv>
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	с точками
    k=0;
	if ( ((clockmode == CLOCKMODE_CLOCK) || (clockmode == CLOCKMODE_ALARMCLOCK)) && ((sec%2) == 0) )
    1530:	80 90 34 02 	lds	r8, 0x0234	; 0x800234 <clockmode>
    1534:	90 90 35 02 	lds	r9, 0x0235	; 0x800235 <clockmode+0x1>
    1538:	81 14       	cp	r8, r1
    153a:	91 04       	cpc	r9, r1
    153c:	21 f0       	breq	.+8      	; 0x1546 <print_all_number+0x1f6>
    153e:	b5 e0       	ldi	r27, 0x05	; 5
    1540:	8b 16       	cp	r8, r27
    1542:	91 04       	cpc	r9, r1
    1544:	61 f5       	brne	.+88     	; 0x159e <print_all_number+0x24e>
    1546:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <sec>
    154a:	80 fd       	sbrc	r24, 0
    154c:	28 c0       	rjmp	.+80     	; 0x159e <print_all_number+0x24e>
	{
		r=3;
		for (i=sizeR4+sizeR3;i<sizeR4+sizeR3+r;i++)
    154e:	b3 01       	movw	r22, r6
    1550:	60 0f       	add	r22, r16
    1552:	71 1f       	adc	r23, r17
    1554:	cb 01       	movw	r24, r22
	 }
	}
	recover_massiv(chose_massivR1(R3),31,chose_size(R3));
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	с точками
    k=0;
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
	if ( ((clockmode == CLOCKMODE_CLOCK) || (clockmode == CLOCKMODE_ALARMCLOCK)) && ((sec%2) == 0) )
	{
		r=3;
		for (i=sizeR4+sizeR3;i<sizeR4+sizeR3+r;i++)
    155a:	15 c0       	rjmp	.+42     	; 0x1586 <print_all_number+0x236>
		{
			mas_of_leds[i] = massiv_points[k];
    155c:	f9 01       	movw	r30, r18
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ea 57       	subi	r30, 0x7A	; 122
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	40 81       	ld	r20, Z
    1568:	51 81       	ldd	r21, Z+1	; 0x01
    156a:	fc 01       	movw	r30, r24
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	a1 e0       	ldi	r26, 0x01	; 1
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ac 0f       	add	r26, r28
    1576:	bd 1f       	adc	r27, r29
    1578:	ea 0f       	add	r30, r26
    157a:	fb 1f       	adc	r31, r27
    157c:	51 83       	std	Z+1, r21	; 0x01
    157e:	40 83       	st	Z, r20
			k++;
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
//вывод разряда	с точками
    k=0;
	if ( ((clockmode == CLOCKMODE_CLOCK) || (clockmode == CLOCKMODE_ALARMCLOCK)) && ((sec%2) == 0) )
	{
		r=3;
		for (i=sizeR4+sizeR3;i<sizeR4+sizeR3+r;i++)
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	ab 01       	movw	r20, r22
    1588:	4d 5f       	subi	r20, 0xFD	; 253
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	84 17       	cp	r24, r20
    158e:	95 07       	cpc	r25, r21
    1590:	2c f3       	brlt	.-54     	; 0x155c <print_all_number+0x20c>
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	с точками
    k=0;
	if ( ((clockmode == CLOCKMODE_CLOCK) || (clockmode == CLOCKMODE_ALARMCLOCK)) && ((sec%2) == 0) )
	{
		r=3;
    1592:	0f 2e       	mov	r0, r31
    1594:	f3 e0       	ldi	r31, 0x03	; 3
    1596:	ef 2e       	mov	r14, r31
    1598:	f1 2c       	mov	r15, r1
    159a:	f0 2d       	mov	r31, r0
    159c:	2c c0       	rjmp	.+88     	; 0x15f6 <print_all_number+0x2a6>
		{
			mas_of_leds[i] = massiv_points[k];
			k++;
		}
	}
	else if ((clockmode == CLOCKMODE_TEMPERATURE) || (clockmode == CLOCKMODE_DATE))
    159e:	c4 01       	movw	r24, r8
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	02 97       	sbiw	r24, 0x02	; 2
    15a4:	30 f5       	brcc	.+76     	; 0x15f2 <print_all_number+0x2a2>
	{
		r=1;
		for (i=sizeR4+sizeR3;i<sizeR4+sizeR3+r;i++)
    15a6:	a3 01       	movw	r20, r6
    15a8:	40 0f       	add	r20, r16
    15aa:	51 1f       	adc	r21, r17
    15ac:	ca 01       	movw	r24, r20
	 }
	}
	recover_massiv(chose_massivR1(R3),31,chose_size(R3));
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	с точками
    k=0;
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	else if ((clockmode == CLOCKMODE_TEMPERATURE) || (clockmode == CLOCKMODE_DATE))
	{
		r=1;
		for (i=sizeR4+sizeR3;i<sizeR4+sizeR3+r;i++)
    15b2:	15 c0       	rjmp	.+42     	; 0x15de <print_all_number+0x28e>
		{
			mas_of_leds[i] = massiv_one_point[k];
    15b4:	f9 01       	movw	r30, r18
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	ec 57       	subi	r30, 0x7C	; 124
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	fc 01       	movw	r30, r24
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	a1 e0       	ldi	r26, 0x01	; 1
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ac 0f       	add	r26, r28
    15ce:	bd 1f       	adc	r27, r29
    15d0:	ea 0f       	add	r30, r26
    15d2:	fb 1f       	adc	r31, r27
    15d4:	71 83       	std	Z+1, r23	; 0x01
    15d6:	60 83       	st	Z, r22
			k++;
    15d8:	2f 5f       	subi	r18, 0xFF	; 255
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	}
	else if ((clockmode == CLOCKMODE_TEMPERATURE) || (clockmode == CLOCKMODE_DATE))
	{
		r=1;
		for (i=sizeR4+sizeR3;i<sizeR4+sizeR3+r;i++)
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	ba 01       	movw	r22, r20
    15e0:	6f 5f       	subi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	86 17       	cp	r24, r22
    15e6:	97 07       	cpc	r25, r23
    15e8:	2c f3       	brlt	.-54     	; 0x15b4 <print_all_number+0x264>
			k++;
		}
	}
	else if ((clockmode == CLOCKMODE_TEMPERATURE) || (clockmode == CLOCKMODE_DATE))
	{
		r=1;
    15ea:	ee 24       	eor	r14, r14
    15ec:	e3 94       	inc	r14
    15ee:	f1 2c       	mov	r15, r1
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <print_all_number+0x2a6>
			k++;
		}
	}
	else
	{
		r=0;
    15f2:	e1 2c       	mov	r14, r1
    15f4:	f1 2c       	mov	r15, r1
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R2	
	mas2 = chose_massivR2(R2);
    15f6:	c6 01       	movw	r24, r12
    15f8:	63 de       	rcall	.-826    	; 0x12c0 <chose_massivR2>
    15fa:	5c 01       	movw	r10, r24
	k=0;
	if ( ((clock_change_mode == MODE_CHANGE_MINUTES)||(clock_change_mode == MODE_CHANGE_ALARM_MINUTES)||(clock_change_mode == MODE_CHANGE_MONTH)||(clock_change_mode == MODE_CHANGE_YEAR)||(clock_change_mode == MODE_CHANGE_WEAKDAY)) && (timer1_count == 0))
    15fc:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <clock_change_mode>
    1600:	e8 96       	adiw	r28, 0x38	; 56
    1602:	bf af       	std	Y+63, r27	; 0x3f
    1604:	e8 97       	sbiw	r28, 0x38	; 56
    1606:	b2 30       	cpi	r27, 0x02	; 2
    1608:	41 f0       	breq	.+16     	; 0x161a <print_all_number+0x2ca>
    160a:	b8 30       	cpi	r27, 0x08	; 8
    160c:	31 f0       	breq	.+12     	; 0x161a <print_all_number+0x2ca>
    160e:	b4 30       	cpi	r27, 0x04	; 4
    1610:	21 f0       	breq	.+8      	; 0x161a <print_all_number+0x2ca>
    1612:	b5 30       	cpi	r27, 0x05	; 5
    1614:	11 f0       	breq	.+4      	; 0x161a <print_all_number+0x2ca>
    1616:	b6 30       	cpi	r27, 0x06	; 6
    1618:	31 f4       	brne	.+12     	; 0x1626 <print_all_number+0x2d6>
    161a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <timer1_count>
    161e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <timer1_count+0x1>
    1622:	89 2b       	or	r24, r25
    1624:	51 f1       	breq	.+84     	; 0x167a <print_all_number+0x32a>
	{
	 sizeR2 = 0;
	}
	else
	{
	 sizeR2 = chose_size(R2);
    1626:	c6 01       	movw	r24, r12
    1628:	73 de       	rcall	.-794    	; 0x1310 <chose_size>
    162a:	6c 01       	movw	r12, r24
	 for (i=sizeR4+sizeR3+r;i<sizeR4+sizeR3+sizeR2+r;i++)
    162c:	b3 01       	movw	r22, r6
    162e:	60 0f       	add	r22, r16
    1630:	71 1f       	adc	r23, r17
    1632:	c7 01       	movw	r24, r14
    1634:	86 0f       	add	r24, r22
    1636:	97 1f       	adc	r25, r23
		r=0;
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R2	
	mas2 = chose_massivR2(R2);
	k=0;
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
	 sizeR2 = 0;
	}
	else
	{
	 sizeR2 = chose_size(R2);
	 for (i=sizeR4+sizeR3+r;i<sizeR4+sizeR3+sizeR2+r;i++)
    163c:	15 c0       	rjmp	.+42     	; 0x1668 <print_all_number+0x318>
	 {
		mas_of_leds[i] = mas2[k];
    163e:	f9 01       	movw	r30, r18
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	ea 0d       	add	r30, r10
    1646:	fb 1d       	adc	r31, r11
    1648:	40 81       	ld	r20, Z
    164a:	51 81       	ldd	r21, Z+1	; 0x01
    164c:	fc 01       	movw	r30, r24
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	a1 e0       	ldi	r26, 0x01	; 1
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ac 0f       	add	r26, r28
    1658:	bd 1f       	adc	r27, r29
    165a:	ea 0f       	add	r30, r26
    165c:	fb 1f       	adc	r31, r27
    165e:	51 83       	std	Z+1, r21	; 0x01
    1660:	40 83       	st	Z, r20
		k++;
    1662:	2f 5f       	subi	r18, 0xFF	; 255
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
	 sizeR2 = 0;
	}
	else
	{
	 sizeR2 = chose_size(R2);
	 for (i=sizeR4+sizeR3+r;i<sizeR4+sizeR3+sizeR2+r;i++)
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	a6 01       	movw	r20, r12
    166a:	46 0f       	add	r20, r22
    166c:	57 1f       	adc	r21, r23
    166e:	4e 0d       	add	r20, r14
    1670:	5f 1d       	adc	r21, r15
    1672:	84 17       	cp	r24, r20
    1674:	95 07       	cpc	r25, r21
    1676:	1c f3       	brlt	.-58     	; 0x163e <print_all_number+0x2ee>
    1678:	02 c0       	rjmp	.+4      	; 0x167e <print_all_number+0x32e>
//вывод разряда	R2	
	mas2 = chose_massivR2(R2);
	k=0;
	if ( ((clock_change_mode == MODE_CHANGE_MINUTES)||(clock_change_mode == MODE_CHANGE_ALARM_MINUTES)||(clock_change_mode == MODE_CHANGE_MONTH)||(clock_change_mode == MODE_CHANGE_YEAR)||(clock_change_mode == MODE_CHANGE_WEAKDAY)) && (timer1_count == 0))
	{
	 sizeR2 = 0;
    167a:	c1 2c       	mov	r12, r1
    167c:	d1 2c       	mov	r13, r1
		k++;
	 }
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R1	
	mas3 = chose_massivR1(R1);
    167e:	c2 01       	movw	r24, r4
    1680:	f7 dd       	rcall	.-1042   	; 0x1270 <chose_massivR1>
    1682:	5c 01       	movw	r10, r24
	k=0;
	if ( ((clock_change_mode == MODE_CHANGE_MINUTES)||(clock_change_mode == MODE_CHANGE_ALARM_MINUTES)||(clock_change_mode == MODE_CHANGE_MONTH)||(clock_change_mode == MODE_CHANGE_YEAR)||(clock_change_mode == MODE_CHANGE_WEAKDAY)) && (timer1_count == 0))
    1684:	e8 96       	adiw	r28, 0x38	; 56
    1686:	bf ad       	ldd	r27, Y+63	; 0x3f
    1688:	e8 97       	sbiw	r28, 0x38	; 56
    168a:	b2 30       	cpi	r27, 0x02	; 2
    168c:	41 f0       	breq	.+16     	; 0x169e <print_all_number+0x34e>
    168e:	b8 30       	cpi	r27, 0x08	; 8
    1690:	31 f0       	breq	.+12     	; 0x169e <print_all_number+0x34e>
    1692:	b4 30       	cpi	r27, 0x04	; 4
    1694:	21 f0       	breq	.+8      	; 0x169e <print_all_number+0x34e>
    1696:	b5 30       	cpi	r27, 0x05	; 5
    1698:	11 f0       	breq	.+4      	; 0x169e <print_all_number+0x34e>
    169a:	b6 30       	cpi	r27, 0x06	; 6
    169c:	39 f4       	brne	.+14     	; 0x16ac <print_all_number+0x35c>
    169e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <timer1_count>
    16a2:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <timer1_count+0x1>
    16a6:	89 2b       	or	r24, r25
    16a8:	09 f4       	brne	.+2      	; 0x16ac <print_all_number+0x35c>
    16aa:	8b c0       	rjmp	.+278    	; 0x17c2 <print_all_number+0x472>
	{
		sizeR1 = 0;
	}
	else
	{
	 if (clockmode == CLOCKMODE_TEMPERATURE)
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	86 16       	cp	r8, r22
    16b0:	91 04       	cpc	r9, r1
    16b2:	59 f5       	brne	.+86     	; 0x170a <print_all_number+0x3ba>
	 {
	  sizeR1 = 8;
	  for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    16b4:	b3 01       	movw	r22, r6
    16b6:	60 0f       	add	r22, r16
    16b8:	71 1f       	adc	r23, r17
    16ba:	6c 0d       	add	r22, r12
    16bc:	7d 1d       	adc	r23, r13
    16be:	c7 01       	movw	r24, r14
    16c0:	86 0f       	add	r24, r22
    16c2:	97 1f       	adc	r25, r23
	 }
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R1	
	mas3 = chose_massivR1(R1);
	k=0;
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
	else
	{
	 if (clockmode == CLOCKMODE_TEMPERATURE)
	 {
	  sizeR1 = 8;
	  for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    16c8:	15 c0       	rjmp	.+42     	; 0x16f4 <print_all_number+0x3a4>
	   {
		 mas_of_leds[i] = massiv_C[k];
    16ca:	f9 01       	movw	r30, r18
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	ec 58       	subi	r30, 0x8C	; 140
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	40 81       	ld	r20, Z
    16d6:	51 81       	ldd	r21, Z+1	; 0x01
    16d8:	fc 01       	movw	r30, r24
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	a1 e0       	ldi	r26, 0x01	; 1
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ac 0f       	add	r26, r28
    16e4:	bd 1f       	adc	r27, r29
    16e6:	ea 0f       	add	r30, r26
    16e8:	fb 1f       	adc	r31, r27
    16ea:	51 83       	std	Z+1, r21	; 0x01
    16ec:	40 83       	st	Z, r20
		 k++;
    16ee:	2f 5f       	subi	r18, 0xFF	; 255
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
	else
	{
	 if (clockmode == CLOCKMODE_TEMPERATURE)
	 {
	  sizeR1 = 8;
	  for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	ab 01       	movw	r20, r22
    16f6:	48 5f       	subi	r20, 0xF8	; 248
    16f8:	5f 4f       	sbci	r21, 0xFF	; 255
    16fa:	4e 0d       	add	r20, r14
    16fc:	5f 1d       	adc	r21, r15
    16fe:	84 17       	cp	r24, r20
    1700:	95 07       	cpc	r25, r21
    1702:	1c f3       	brlt	.-58     	; 0x16ca <print_all_number+0x37a>
	}
	else
	{
	 if (clockmode == CLOCKMODE_TEMPERATURE)
	 {
	  sizeR1 = 8;
    1704:	88 e0       	ldi	r24, 0x08	; 8
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	5e c0       	rjmp	.+188    	; 0x17c6 <print_all_number+0x476>
	   {
		 mas_of_leds[i] = massiv_C[k];
		 k++;
	   }
	 }
	 else if (clockmode == CLOCKMODE_WEAKDAY)
    170a:	b3 e0       	ldi	r27, 0x03	; 3
    170c:	8b 16       	cp	r8, r27
    170e:	91 04       	cpc	r9, r1
    1710:	59 f5       	brne	.+86     	; 0x1768 <print_all_number+0x418>
	 {
	   sizeR1 = sizeR3;
	   for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    1712:	a3 01       	movw	r20, r6
    1714:	40 0f       	add	r20, r16
    1716:	51 1f       	adc	r21, r17
    1718:	4c 0d       	add	r20, r12
    171a:	5d 1d       	adc	r21, r13
    171c:	c7 01       	movw	r24, r14
    171e:	84 0f       	add	r24, r20
    1720:	95 1f       	adc	r25, r21
	 }
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R1	
	mas3 = chose_massivR1(R1);
	k=0;
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
	   }
	 }
	 else if (clockmode == CLOCKMODE_WEAKDAY)
	 {
	   sizeR1 = sizeR3;
	   for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <print_all_number+0x404>
	   {
		   mas_of_leds[i] = massiv_2nd_tire[k];
    1728:	f9 01       	movw	r30, r18
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	e4 59       	subi	r30, 0x94	; 148
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	fc 01       	movw	r30, r24
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	88 24       	eor	r8, r8
    173e:	83 94       	inc	r8
    1740:	91 2c       	mov	r9, r1
    1742:	8c 0e       	add	r8, r28
    1744:	9d 1e       	adc	r9, r29
    1746:	e8 0d       	add	r30, r8
    1748:	f9 1d       	adc	r31, r9
    174a:	71 83       	std	Z+1, r23	; 0x01
    174c:	60 83       	st	Z, r22
		   k++;
    174e:	2f 5f       	subi	r18, 0xFF	; 255
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
	   }
	 }
	 else if (clockmode == CLOCKMODE_WEAKDAY)
	 {
	   sizeR1 = sizeR3;
	   for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	b3 01       	movw	r22, r6
    1756:	64 0f       	add	r22, r20
    1758:	75 1f       	adc	r23, r21
    175a:	6e 0d       	add	r22, r14
    175c:	7f 1d       	adc	r23, r15
    175e:	86 17       	cp	r24, r22
    1760:	97 07       	cpc	r25, r23
    1762:	14 f3       	brlt	.-60     	; 0x1728 <print_all_number+0x3d8>
		 k++;
	   }
	 }
	 else if (clockmode == CLOCKMODE_WEAKDAY)
	 {
	   sizeR1 = sizeR3;
    1764:	c3 01       	movw	r24, r6
    1766:	2f c0       	rjmp	.+94     	; 0x17c6 <print_all_number+0x476>
		   k++;
	   }
	 }
	 else
	 {
	  sizeR1 = chose_size(R1);
    1768:	c2 01       	movw	r24, r4
    176a:	d2 dd       	rcall	.-1116   	; 0x1310 <chose_size>
	  for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    176c:	d3 01       	movw	r26, r6
    176e:	a0 0f       	add	r26, r16
    1770:	b1 1f       	adc	r27, r17
    1772:	ac 0d       	add	r26, r12
    1774:	bd 1d       	adc	r27, r13
    1776:	97 01       	movw	r18, r14
    1778:	2a 0f       	add	r18, r26
    177a:	3b 1f       	adc	r19, r27
	 }
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//вывод разряда	R1	
	mas3 = chose_massivR1(R1);
	k=0;
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	50 e0       	ldi	r21, 0x00	; 0
	   }
	 }
	 else
	 {
	  sizeR1 = chose_size(R1);
	  for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    1780:	17 c0       	rjmp	.+46     	; 0x17b0 <print_all_number+0x460>
	  {
	 	 mas_of_leds[i] = mas3[k];
    1782:	fa 01       	movw	r30, r20
    1784:	ee 0f       	add	r30, r30
    1786:	ff 1f       	adc	r31, r31
    1788:	ea 0d       	add	r30, r10
    178a:	fb 1d       	adc	r31, r11
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	f9 01       	movw	r30, r18
    1792:	ee 0f       	add	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	88 24       	eor	r8, r8
    1798:	83 94       	inc	r8
    179a:	91 2c       	mov	r9, r1
    179c:	8c 0e       	add	r8, r28
    179e:	9d 1e       	adc	r9, r29
    17a0:	e8 0d       	add	r30, r8
    17a2:	f9 1d       	adc	r31, r9
    17a4:	71 83       	std	Z+1, r23	; 0x01
    17a6:	60 83       	st	Z, r22
	   	 k++;
    17a8:	4f 5f       	subi	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
	   }
	 }
	 else
	 {
	  sizeR1 = chose_size(R1);
	  for (i=sizeR4+sizeR3+sizeR2+r;i<sizeR4+sizeR3+sizeR2+sizeR1+r;i++)
    17ac:	2f 5f       	subi	r18, 0xFF	; 255
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	bc 01       	movw	r22, r24
    17b2:	6a 0f       	add	r22, r26
    17b4:	7b 1f       	adc	r23, r27
    17b6:	6e 0d       	add	r22, r14
    17b8:	7f 1d       	adc	r23, r15
    17ba:	26 17       	cp	r18, r22
    17bc:	37 07       	cpc	r19, r23
    17be:	0c f3       	brlt	.-62     	; 0x1782 <print_all_number+0x432>
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <print_all_number+0x476>
//вывод разряда	R1	
	mas3 = chose_massivR1(R1);
	k=0;
	if ( ((clock_change_mode == MODE_CHANGE_MINUTES)||(clock_change_mode == MODE_CHANGE_ALARM_MINUTES)||(clock_change_mode == MODE_CHANGE_MONTH)||(clock_change_mode == MODE_CHANGE_YEAR)||(clock_change_mode == MODE_CHANGE_WEAKDAY)) && (timer1_count == 0))
	{
		sizeR1 = 0;
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
	  }
	 }
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//обнуление оставшихся элементов массива
    for(m=sizeR4+sizeR3+sizeR2+sizeR1+r;m<59;m++)
    17c6:	06 0d       	add	r16, r6
    17c8:	17 1d       	adc	r17, r7
    17ca:	c0 0e       	add	r12, r16
    17cc:	d1 1e       	adc	r13, r17
    17ce:	8c 0d       	add	r24, r12
    17d0:	9d 1d       	adc	r25, r13
    17d2:	e8 0e       	add	r14, r24
    17d4:	f9 1e       	adc	r15, r25
    17d6:	0e c0       	rjmp	.+28     	; 0x17f4 <print_all_number+0x4a4>
    {
	mas_of_leds[m] = 0;
    17d8:	f7 01       	movw	r30, r14
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	6c 0f       	add	r22, r28
    17e4:	7d 1f       	adc	r23, r29
    17e6:	e6 0f       	add	r30, r22
    17e8:	f7 1f       	adc	r31, r23
    17ea:	11 82       	std	Z+1, r1	; 0x01
    17ec:	10 82       	st	Z, r1
	  }
	 }
	}
//-------------------------------------------------------------------------------------------------------------------------------------------
//обнуление оставшихся элементов массива
    for(m=sizeR4+sizeR3+sizeR2+sizeR1+r;m<59;m++)
    17ee:	7f ef       	ldi	r23, 0xFF	; 255
    17f0:	e7 1a       	sub	r14, r23
    17f2:	f7 0a       	sbc	r15, r23
    17f4:	8b e3       	ldi	r24, 0x3B	; 59
    17f6:	e8 16       	cp	r14, r24
    17f8:	f1 04       	cpc	r15, r1
    17fa:	74 f3       	brlt	.-36     	; 0x17d8 <print_all_number+0x488>
    {
	mas_of_leds[m] = 0;
    }
	turn_on_diap_of_LEDS(mas_of_leds, mode);
    17fc:	b1 01       	movw	r22, r2
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	33 dc       	rcall	.-1946   	; 0x106a <turn_on_diap_of_LEDS>
}
    1804:	c9 58       	subi	r28, 0x89	; 137
    1806:	df 4f       	sbci	r29, 0xFF	; 255
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	5f 90       	pop	r5
    1830:	4f 90       	pop	r4
    1832:	3f 90       	pop	r3
    1834:	2f 90       	pop	r2
    1836:	08 95       	ret

00001838 <__fixsfsi>:
    1838:	04 d0       	rcall	.+8      	; 0x1842 <__fixunssfsi>
    183a:	68 94       	set
    183c:	b1 11       	cpse	r27, r1
    183e:	50 c0       	rjmp	.+160    	; 0x18e0 <__fp_szero>
    1840:	08 95       	ret

00001842 <__fixunssfsi>:
    1842:	33 d0       	rcall	.+102    	; 0x18aa <__fp_splitA>
    1844:	88 f0       	brcs	.+34     	; 0x1868 <__fixunssfsi+0x26>
    1846:	9f 57       	subi	r25, 0x7F	; 127
    1848:	90 f0       	brcs	.+36     	; 0x186e <__fixunssfsi+0x2c>
    184a:	b9 2f       	mov	r27, r25
    184c:	99 27       	eor	r25, r25
    184e:	b7 51       	subi	r27, 0x17	; 23
    1850:	a0 f0       	brcs	.+40     	; 0x187a <__fixunssfsi+0x38>
    1852:	d1 f0       	breq	.+52     	; 0x1888 <__fixunssfsi+0x46>
    1854:	66 0f       	add	r22, r22
    1856:	77 1f       	adc	r23, r23
    1858:	88 1f       	adc	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	1a f0       	brmi	.+6      	; 0x1864 <__fixunssfsi+0x22>
    185e:	ba 95       	dec	r27
    1860:	c9 f7       	brne	.-14     	; 0x1854 <__fixunssfsi+0x12>
    1862:	12 c0       	rjmp	.+36     	; 0x1888 <__fixunssfsi+0x46>
    1864:	b1 30       	cpi	r27, 0x01	; 1
    1866:	81 f0       	breq	.+32     	; 0x1888 <__fixunssfsi+0x46>
    1868:	3a d0       	rcall	.+116    	; 0x18de <__fp_zero>
    186a:	b1 e0       	ldi	r27, 0x01	; 1
    186c:	08 95       	ret
    186e:	37 c0       	rjmp	.+110    	; 0x18de <__fp_zero>
    1870:	67 2f       	mov	r22, r23
    1872:	78 2f       	mov	r23, r24
    1874:	88 27       	eor	r24, r24
    1876:	b8 5f       	subi	r27, 0xF8	; 248
    1878:	39 f0       	breq	.+14     	; 0x1888 <__fixunssfsi+0x46>
    187a:	b9 3f       	cpi	r27, 0xF9	; 249
    187c:	cc f3       	brlt	.-14     	; 0x1870 <__fixunssfsi+0x2e>
    187e:	86 95       	lsr	r24
    1880:	77 95       	ror	r23
    1882:	67 95       	ror	r22
    1884:	b3 95       	inc	r27
    1886:	d9 f7       	brne	.-10     	; 0x187e <__fixunssfsi+0x3c>
    1888:	3e f4       	brtc	.+14     	; 0x1898 <__fixunssfsi+0x56>
    188a:	90 95       	com	r25
    188c:	80 95       	com	r24
    188e:	70 95       	com	r23
    1890:	61 95       	neg	r22
    1892:	7f 4f       	sbci	r23, 0xFF	; 255
    1894:	8f 4f       	sbci	r24, 0xFF	; 255
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	08 95       	ret

0000189a <__fp_split3>:
    189a:	57 fd       	sbrc	r21, 7
    189c:	90 58       	subi	r25, 0x80	; 128
    189e:	44 0f       	add	r20, r20
    18a0:	55 1f       	adc	r21, r21
    18a2:	59 f0       	breq	.+22     	; 0x18ba <__fp_splitA+0x10>
    18a4:	5f 3f       	cpi	r21, 0xFF	; 255
    18a6:	71 f0       	breq	.+28     	; 0x18c4 <__fp_splitA+0x1a>
    18a8:	47 95       	ror	r20

000018aa <__fp_splitA>:
    18aa:	88 0f       	add	r24, r24
    18ac:	97 fb       	bst	r25, 7
    18ae:	99 1f       	adc	r25, r25
    18b0:	61 f0       	breq	.+24     	; 0x18ca <__fp_splitA+0x20>
    18b2:	9f 3f       	cpi	r25, 0xFF	; 255
    18b4:	79 f0       	breq	.+30     	; 0x18d4 <__fp_splitA+0x2a>
    18b6:	87 95       	ror	r24
    18b8:	08 95       	ret
    18ba:	12 16       	cp	r1, r18
    18bc:	13 06       	cpc	r1, r19
    18be:	14 06       	cpc	r1, r20
    18c0:	55 1f       	adc	r21, r21
    18c2:	f2 cf       	rjmp	.-28     	; 0x18a8 <__fp_split3+0xe>
    18c4:	46 95       	lsr	r20
    18c6:	f1 df       	rcall	.-30     	; 0x18aa <__fp_splitA>
    18c8:	08 c0       	rjmp	.+16     	; 0x18da <__fp_splitA+0x30>
    18ca:	16 16       	cp	r1, r22
    18cc:	17 06       	cpc	r1, r23
    18ce:	18 06       	cpc	r1, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	f1 cf       	rjmp	.-30     	; 0x18b6 <__fp_splitA+0xc>
    18d4:	86 95       	lsr	r24
    18d6:	71 05       	cpc	r23, r1
    18d8:	61 05       	cpc	r22, r1
    18da:	08 94       	sec
    18dc:	08 95       	ret

000018de <__fp_zero>:
    18de:	e8 94       	clt

000018e0 <__fp_szero>:
    18e0:	bb 27       	eor	r27, r27
    18e2:	66 27       	eor	r22, r22
    18e4:	77 27       	eor	r23, r23
    18e6:	cb 01       	movw	r24, r22
    18e8:	97 f9       	bld	r25, 7
    18ea:	08 95       	ret

000018ec <__mulsf3>:
    18ec:	0b d0       	rcall	.+22     	; 0x1904 <__mulsf3x>
    18ee:	78 c0       	rjmp	.+240    	; 0x19e0 <__fp_round>
    18f0:	69 d0       	rcall	.+210    	; 0x19c4 <__fp_pscA>
    18f2:	28 f0       	brcs	.+10     	; 0x18fe <__mulsf3+0x12>
    18f4:	6e d0       	rcall	.+220    	; 0x19d2 <__fp_pscB>
    18f6:	18 f0       	brcs	.+6      	; 0x18fe <__mulsf3+0x12>
    18f8:	95 23       	and	r25, r21
    18fa:	09 f0       	breq	.+2      	; 0x18fe <__mulsf3+0x12>
    18fc:	5a c0       	rjmp	.+180    	; 0x19b2 <__fp_inf>
    18fe:	5f c0       	rjmp	.+190    	; 0x19be <__fp_nan>
    1900:	11 24       	eor	r1, r1
    1902:	ee cf       	rjmp	.-36     	; 0x18e0 <__fp_szero>

00001904 <__mulsf3x>:
    1904:	ca df       	rcall	.-108    	; 0x189a <__fp_split3>
    1906:	a0 f3       	brcs	.-24     	; 0x18f0 <__mulsf3+0x4>

00001908 <__mulsf3_pse>:
    1908:	95 9f       	mul	r25, r21
    190a:	d1 f3       	breq	.-12     	; 0x1900 <__mulsf3+0x14>
    190c:	95 0f       	add	r25, r21
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	55 1f       	adc	r21, r21
    1912:	62 9f       	mul	r22, r18
    1914:	f0 01       	movw	r30, r0
    1916:	72 9f       	mul	r23, r18
    1918:	bb 27       	eor	r27, r27
    191a:	f0 0d       	add	r31, r0
    191c:	b1 1d       	adc	r27, r1
    191e:	63 9f       	mul	r22, r19
    1920:	aa 27       	eor	r26, r26
    1922:	f0 0d       	add	r31, r0
    1924:	b1 1d       	adc	r27, r1
    1926:	aa 1f       	adc	r26, r26
    1928:	64 9f       	mul	r22, r20
    192a:	66 27       	eor	r22, r22
    192c:	b0 0d       	add	r27, r0
    192e:	a1 1d       	adc	r26, r1
    1930:	66 1f       	adc	r22, r22
    1932:	82 9f       	mul	r24, r18
    1934:	22 27       	eor	r18, r18
    1936:	b0 0d       	add	r27, r0
    1938:	a1 1d       	adc	r26, r1
    193a:	62 1f       	adc	r22, r18
    193c:	73 9f       	mul	r23, r19
    193e:	b0 0d       	add	r27, r0
    1940:	a1 1d       	adc	r26, r1
    1942:	62 1f       	adc	r22, r18
    1944:	83 9f       	mul	r24, r19
    1946:	a0 0d       	add	r26, r0
    1948:	61 1d       	adc	r22, r1
    194a:	22 1f       	adc	r18, r18
    194c:	74 9f       	mul	r23, r20
    194e:	33 27       	eor	r19, r19
    1950:	a0 0d       	add	r26, r0
    1952:	61 1d       	adc	r22, r1
    1954:	23 1f       	adc	r18, r19
    1956:	84 9f       	mul	r24, r20
    1958:	60 0d       	add	r22, r0
    195a:	21 1d       	adc	r18, r1
    195c:	82 2f       	mov	r24, r18
    195e:	76 2f       	mov	r23, r22
    1960:	6a 2f       	mov	r22, r26
    1962:	11 24       	eor	r1, r1
    1964:	9f 57       	subi	r25, 0x7F	; 127
    1966:	50 40       	sbci	r21, 0x00	; 0
    1968:	8a f0       	brmi	.+34     	; 0x198c <__mulsf3_pse+0x84>
    196a:	e1 f0       	breq	.+56     	; 0x19a4 <__mulsf3_pse+0x9c>
    196c:	88 23       	and	r24, r24
    196e:	4a f0       	brmi	.+18     	; 0x1982 <__mulsf3_pse+0x7a>
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	bb 1f       	adc	r27, r27
    1976:	66 1f       	adc	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	88 1f       	adc	r24, r24
    197c:	91 50       	subi	r25, 0x01	; 1
    197e:	50 40       	sbci	r21, 0x00	; 0
    1980:	a9 f7       	brne	.-22     	; 0x196c <__mulsf3_pse+0x64>
    1982:	9e 3f       	cpi	r25, 0xFE	; 254
    1984:	51 05       	cpc	r21, r1
    1986:	70 f0       	brcs	.+28     	; 0x19a4 <__mulsf3_pse+0x9c>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <__fp_inf>
    198a:	aa cf       	rjmp	.-172    	; 0x18e0 <__fp_szero>
    198c:	5f 3f       	cpi	r21, 0xFF	; 255
    198e:	ec f3       	brlt	.-6      	; 0x198a <__mulsf3_pse+0x82>
    1990:	98 3e       	cpi	r25, 0xE8	; 232
    1992:	dc f3       	brlt	.-10     	; 0x198a <__mulsf3_pse+0x82>
    1994:	86 95       	lsr	r24
    1996:	77 95       	ror	r23
    1998:	67 95       	ror	r22
    199a:	b7 95       	ror	r27
    199c:	f7 95       	ror	r31
    199e:	e7 95       	ror	r30
    19a0:	9f 5f       	subi	r25, 0xFF	; 255
    19a2:	c1 f7       	brne	.-16     	; 0x1994 <__mulsf3_pse+0x8c>
    19a4:	fe 2b       	or	r31, r30
    19a6:	88 0f       	add	r24, r24
    19a8:	91 1d       	adc	r25, r1
    19aa:	96 95       	lsr	r25
    19ac:	87 95       	ror	r24
    19ae:	97 f9       	bld	r25, 7
    19b0:	08 95       	ret

000019b2 <__fp_inf>:
    19b2:	97 f9       	bld	r25, 7
    19b4:	9f 67       	ori	r25, 0x7F	; 127
    19b6:	80 e8       	ldi	r24, 0x80	; 128
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	08 95       	ret

000019be <__fp_nan>:
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	80 ec       	ldi	r24, 0xC0	; 192
    19c2:	08 95       	ret

000019c4 <__fp_pscA>:
    19c4:	00 24       	eor	r0, r0
    19c6:	0a 94       	dec	r0
    19c8:	16 16       	cp	r1, r22
    19ca:	17 06       	cpc	r1, r23
    19cc:	18 06       	cpc	r1, r24
    19ce:	09 06       	cpc	r0, r25
    19d0:	08 95       	ret

000019d2 <__fp_pscB>:
    19d2:	00 24       	eor	r0, r0
    19d4:	0a 94       	dec	r0
    19d6:	12 16       	cp	r1, r18
    19d8:	13 06       	cpc	r1, r19
    19da:	14 06       	cpc	r1, r20
    19dc:	05 06       	cpc	r0, r21
    19de:	08 95       	ret

000019e0 <__fp_round>:
    19e0:	09 2e       	mov	r0, r25
    19e2:	03 94       	inc	r0
    19e4:	00 0c       	add	r0, r0
    19e6:	11 f4       	brne	.+4      	; 0x19ec <__fp_round+0xc>
    19e8:	88 23       	and	r24, r24
    19ea:	52 f0       	brmi	.+20     	; 0x1a00 <__fp_round+0x20>
    19ec:	bb 0f       	add	r27, r27
    19ee:	40 f4       	brcc	.+16     	; 0x1a00 <__fp_round+0x20>
    19f0:	bf 2b       	or	r27, r31
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <__fp_round+0x18>
    19f4:	60 ff       	sbrs	r22, 0
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <__fp_round+0x20>
    19f8:	6f 5f       	subi	r22, 0xFF	; 255
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	08 95       	ret

00001a02 <__divmodhi4>:
    1a02:	97 fb       	bst	r25, 7
    1a04:	07 2e       	mov	r0, r23
    1a06:	16 f4       	brtc	.+4      	; 0x1a0c <__divmodhi4+0xa>
    1a08:	00 94       	com	r0
    1a0a:	06 d0       	rcall	.+12     	; 0x1a18 <__divmodhi4_neg1>
    1a0c:	77 fd       	sbrc	r23, 7
    1a0e:	08 d0       	rcall	.+16     	; 0x1a20 <__divmodhi4_neg2>
    1a10:	0b d0       	rcall	.+22     	; 0x1a28 <__udivmodhi4>
    1a12:	07 fc       	sbrc	r0, 7
    1a14:	05 d0       	rcall	.+10     	; 0x1a20 <__divmodhi4_neg2>
    1a16:	3e f4       	brtc	.+14     	; 0x1a26 <__divmodhi4_exit>

00001a18 <__divmodhi4_neg1>:
    1a18:	90 95       	com	r25
    1a1a:	81 95       	neg	r24
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	08 95       	ret

00001a20 <__divmodhi4_neg2>:
    1a20:	70 95       	com	r23
    1a22:	61 95       	neg	r22
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255

00001a26 <__divmodhi4_exit>:
    1a26:	08 95       	ret

00001a28 <__udivmodhi4>:
    1a28:	aa 1b       	sub	r26, r26
    1a2a:	bb 1b       	sub	r27, r27
    1a2c:	51 e1       	ldi	r21, 0x11	; 17
    1a2e:	07 c0       	rjmp	.+14     	; 0x1a3e <__udivmodhi4_ep>

00001a30 <__udivmodhi4_loop>:
    1a30:	aa 1f       	adc	r26, r26
    1a32:	bb 1f       	adc	r27, r27
    1a34:	a6 17       	cp	r26, r22
    1a36:	b7 07       	cpc	r27, r23
    1a38:	10 f0       	brcs	.+4      	; 0x1a3e <__udivmodhi4_ep>
    1a3a:	a6 1b       	sub	r26, r22
    1a3c:	b7 0b       	sbc	r27, r23

00001a3e <__udivmodhi4_ep>:
    1a3e:	88 1f       	adc	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	5a 95       	dec	r21
    1a44:	a9 f7       	brne	.-22     	; 0x1a30 <__udivmodhi4_loop>
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	08 95       	ret

00001a50 <_exit>:
    1a50:	f8 94       	cli

00001a52 <__stop_program>:
    1a52:	ff cf       	rjmp	.-2      	; 0x1a52 <__stop_program>
